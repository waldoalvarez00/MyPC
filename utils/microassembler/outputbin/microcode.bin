//next a_sel alu_op b_sel ext_int_inhibit ext_int_yield immediate io jump_type load_ip mar_wr_sel mar_write mdr_write mem_read mem_write next_instruction ra_modrm_rm_reg ra_sel rb_cl rd_sel rd_sel_source reg_wr_source segment segment_force segment_wr_en tmp_wr_en tmp_wr_sel update_flags width
0010100010100000000000000000000010010000100000000000110000000010 // 0 microcode\add.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0010100010100000000000000000000010010000100000000000110000000010 // 1 microcode\add.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0010100100000000000000000000000010010000100000000000110000000010 // 2 microcode\add.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0010100100000000000000000000000010010000100000000000110000000010 // 3 microcode\add.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0010100101100000000000000000000000000000000000000000000000000010 // 4 microcode\add.us:10 width ra_sel jump_type jump_target
0010100101100000000000000000000000000000000000000000000000000010 // 5 microcode\add.us:10 width ra_sel jump_type jump_target
0110010111000000000000000000000000000000000000000000001000000000 // 6 microcode\push.us:21 segment_force segment jump_type jump_target
0101111111100000000000000000000000000000010000000000000000000000 // 7 microcode\pop.us:23 ra_sel jump_type jump_target
0101110100000000000000000000000010010000100000000000110000000010 // 8 microcode\or.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0101110100000000000000000000000010010000100000000000110000000010 // 9 microcode\or.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0101110101100000000000000000000010010000100000000000110000000010 // a microcode\or.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0101110101100000000000000000000010010000100000000000110000000010 // b microcode\or.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0101110111000000000000000000000000000000000000000000000000000010 // c microcode\or.us:10 width ra_sel jump_type jump_target
0101110111000000000000000000000000000000000000000000000000000010 // d microcode\or.us:10 width ra_sel jump_type jump_target
0110010111000000000000000000000000000000000000000000011000000000 // e microcode\push.us:22 segment_force segment jump_type jump_target
1000011101000000000000000000000000000000000000000000000000000000 // f microcode\microcode.us:47 jump_type jump_target
0010011011000000000000000000000010010000100000000000110000000010 // 10 microcode\adc.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0010011011000000000000000000000010010000100000000000110000000010 // 11 microcode\adc.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0010011100100000000000000000000010010000100000000000110000000010 // 12 microcode\adc.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0010011100100000000000000000000010010000100000000000110000000010 // 13 microcode\adc.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0010011110000000000000000000000000000000000000000000000000000010 // 14 microcode\adc.us:10 width ra_sel jump_type jump_target
0010011110000000000000000000000000000000000000000000000000000010 // 15 microcode\adc.us:10 width ra_sel jump_type jump_target
0110010111000000000000000000000000000000000000000000101000000000 // 16 microcode\push.us:23 segment_force segment jump_type jump_target
0110000001000000000000000000000000000000010000000000000000000000 // 17 microcode\pop.us:24 ra_sel jump_type jump_target
0111010101000000000000000000000010010000100000000000110000000010 // 18 microcode\sbb.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0111010101000000000000000000000010010000100000000000110000000010 // 19 microcode\sbb.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0111010110100000000000000000000010010000100000000000110000000010 // 1a microcode\sbb.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0111010110100000000000000000000010010000100000000000110000000010 // 1b microcode\sbb.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0111011000000000000000000000000000000000000000000000000000000010 // 1c microcode\sbb.us:10 width ra_sel jump_type jump_target
0111011000000000000000000000000000000000000000000000000000000010 // 1d microcode\sbb.us:10 width ra_sel jump_type jump_target
0110010111000000000000000000000000000000000000000000111000000000 // 1e microcode\push.us:24 segment_force segment jump_type jump_target
0110000010100000000000000000000000000000010000000000000000000000 // 1f microcode\pop.us:25 ra_sel jump_type jump_target
0010101010000000000000000000000010010000100000000000110000000010 // 20 microcode\and.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0010101010000000000000000000000010010000100000000000110000000010 // 21 microcode\and.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0010101011100000000000000000000010010000100000000000110000000010 // 22 microcode\and.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0010101011100000000000000000000010010000100000000000110000000010 // 23 microcode\and.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0010101101000000000000000000000000000000000000000000000000000010 // 24 microcode\and.us:10 width ra_sel jump_type jump_target
0010101101000000000000000000000000000000000000000000000000000010 // 25 microcode\and.us:10 width ra_sel jump_type jump_target
0000010011100000000000000000000000000001000000000000000000000000 // 26 microcode\microcode.us:55 next_instruction
0010110110100000000000000000000000000000000000000000000000000000 // 27 microcode\daa.us:6 ra_sel jump_type jump_target
0111111001000000000000000000000010010000100000000000110000000010 // 28 microcode\sub.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0111111001000000000000000000000010010000100000000000110000000010 // 29 microcode\sub.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0111111010100000000000000000000010010000100000000000110000000010 // 2a microcode\sub.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0111111010100000000000000000000010010000100000000000110000000010 // 2b microcode\sub.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
0111111100000000000000000000000000000000000000000000000000000010 // 2c microcode\sub.us:10 width ra_sel jump_type jump_target
0111111100000000000000000000000000000000000000000000000000000010 // 2d microcode\sub.us:10 width ra_sel jump_type jump_target
0000010111100000000000000000000000000001000000000000000000000000 // 2e microcode\microcode.us:56 next_instruction
0010110111000000000000000000000000000000000000000000000000000000 // 2f microcode\das.us:6 ra_sel jump_type jump_target
1000010101100000000000000000000010010000100000000000110000000010 // 30 microcode\xor.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
1000010101100000000000000000000010010000100000000000110000000010 // 31 microcode\xor.us:8 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
1000010111000000000000000000000010010000100000000000110000000010 // 32 microcode\xor.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
1000010111000000000000000000000010010000100000000000110000000010 // 33 microcode\xor.us:9 mar_write mar_wr_sel width ra_modrm_rm_reg jump_type segment jump_target
1000011000100000000000000000000000000000000000000000000000000010 // 34 microcode\xor.us:10 width ra_sel jump_type jump_target
1000011000100000000000000000000000000000000000000000000000000010 // 35 microcode\xor.us:10 width ra_sel jump_type jump_target
0000011011100000000000000000000000000001000000000000000000000000 // 36 microcode\microcode.us:57 next_instruction
0010011000000000000000000000000000000000000000000000000000000000 // 37 microcode\aaa.us:6 ra_sel jump_type jump_target
0011000110000000000000000000000010010000100000000000110000000010 // 38 microcode\cmp.us:8 mar_write mar_wr_sel width segment ra_modrm_rm_reg jump_type jump_target
0011000110000000000000000000000010010000100000000000110000000010 // 39 microcode\cmp.us:8 mar_write mar_wr_sel width segment ra_modrm_rm_reg jump_type jump_target
0011000111100000000000000000000010010000100000000000110000000010 // 3a microcode\cmp.us:9 mar_write mar_wr_sel width segment ra_modrm_rm_reg jump_type jump_target
0011000111100000000000000000000010010000100000000000110000000010 // 3b microcode\cmp.us:9 mar_write mar_wr_sel width segment ra_modrm_rm_reg jump_type jump_target
0011001001000000000000000000000000000000000000000000000000000010 // 3c microcode\cmp.us:10 width ra_sel jump_type jump_target
0011001001000000000000000000000000000000000000000000000000000010 // 3d microcode\cmp.us:10 width ra_sel jump_type jump_target
0000011111100000000000000000000000000001000000000000000000000000 // 3e microcode\microcode.us:58 next_instruction
0010011010100000000000000000000000000000000000000000000000000000 // 3f microcode\aas.us:6 ra_sel jump_type jump_target
0011111011000000000000000000000000000000000000000000000000000000 // 40 microcode\inc.us:38 ra_sel jump_type jump_target
0011111011100000000000000000000000000000000100000000000000000000 // 41 microcode\inc.us:39 ra_sel jump_type jump_target
0011111100000000000000000000000000000000001000000000000000000000 // 42 microcode\inc.us:40 ra_sel jump_type jump_target
0011111100100000000000000000000000000000001100000000000000000000 // 43 microcode\inc.us:41 ra_sel jump_type jump_target
0011111101000000000000000000000000000000010000000000000000000000 // 44 microcode\inc.us:42 ra_sel jump_type jump_target
0011111101100000000000000000000000000000010100000000000000000000 // 45 microcode\inc.us:43 ra_sel jump_type jump_target
0011111110000000000000000000000000000000011000000000000000000000 // 46 microcode\inc.us:44 ra_sel jump_type jump_target
0011111110100000000000000000000000000000011100000000000000000000 // 47 microcode\inc.us:45 ra_sel jump_type jump_target
0011111111000000000000000000000000000000000000000000000000000000 // 48 microcode\inc.us:47 ra_sel jump_type jump_target
0011111111100000000000000000000000000000000100000000000000000000 // 49 microcode\inc.us:48 ra_sel jump_type jump_target
0100000000000000000000000000000000000000001000000000000000000000 // 4a microcode\inc.us:49 ra_sel jump_type jump_target
0100000000100000000000000000000000000000001100000000000000000000 // 4b microcode\inc.us:50 ra_sel jump_type jump_target
0100000001000000000000000000000000000000010000000000000000000000 // 4c microcode\inc.us:51 ra_sel jump_type jump_target
0100000001100000000000000000000000000000010100000000000000000000 // 4d microcode\inc.us:52 ra_sel jump_type jump_target
0100000010000000000000000000000000000000011000000000000000000000 // 4e microcode\inc.us:53 ra_sel jump_type jump_target
0100000010100000000000000000000000000000011100000000000000000000 // 4f microcode\inc.us:54 ra_sel jump_type jump_target
0110010100100000000000000000000000000000000000000000000000000000 // 50 microcode\push.us:26 ra_sel jump_type jump_target
0110010100100000000000000000000000000000000100000000000000000000 // 51 microcode\push.us:27 ra_sel jump_type jump_target
0110010100100000000000000000000000000000001000000000000000000000 // 52 microcode\push.us:28 ra_sel jump_type jump_target
0110010100100000000000000000000000000000001100000000000000000000 // 53 microcode\push.us:29 ra_sel jump_type jump_target
0110010110000000000000000000000000000000010000000000000000000000 // 54 microcode\push.us:45 ra_sel jump_type jump_target
0110010100100000000000000000000000000000010100000000000000000000 // 55 microcode\push.us:30 ra_sel jump_type jump_target
0110010100100000000000000000000000000000011000000000000000000000 // 56 microcode\push.us:31 ra_sel jump_type jump_target
0110010100100000000000000000000000000000011100000000000000000000 // 57 microcode\push.us:32 ra_sel jump_type jump_target
0110000100000000000000000000000000000000010000000000000000000000 // 58 microcode\pop.us:27 ra_sel jump_type jump_target
0110000101100000000000000000000000000000010000000000000000000000 // 59 microcode\pop.us:28 ra_sel jump_type jump_target
0110000111000000000000000000000000000000010000000000000000000000 // 5a microcode\pop.us:29 ra_sel jump_type jump_target
0110001000100000000000000000000000000000010000000000000000000000 // 5b microcode\pop.us:30 ra_sel jump_type jump_target
0110001010000000000000000000000000000000010000000000000000000000 // 5c microcode\pop.us:31 ra_sel jump_type jump_target
0110001011100000000000000000000000000000010000000000000000000000 // 5d microcode\pop.us:32 ra_sel jump_type jump_target
0110001101000000000000000000000000000000010000000000000000000000 // 5e microcode\pop.us:33 ra_sel jump_type jump_target
0110001110100000000000000000000000000000010000000000000000000000 // 5f microcode\pop.us:34 ra_sel jump_type jump_target
0110011100100000000000000000000000000000010000000000000000000000 // 60 microcode\push.us:88 ra_sel jump_type jump_target
0110100101000000000000000000000000000000010000000000000000000000 // 61 microcode\push.us:133 ra_sel jump_type jump_target
0010110001100000000000000000000010010000000000000000110000000000 // 62 microcode\bound.us:6 mar_write mar_wr_sel segment jump_type jump_target
1000011101000000000000000000000000000000000000000000000000000000 // 63 microcode\microcode.us:48 jump_type jump_target
1000011101000000000000000000000000000000000000000000000000000000 // 64 microcode\microcode.us:49 jump_type jump_target
1000011101000000000000000000000000000000000000000000000000000000 // 65 microcode\microcode.us:50 jump_type jump_target
1000011101000000000000000000000000000000000000000000000000000000 // 66 microcode\microcode.us:51 jump_type jump_target
1000011101000000000000000000000000000000000000000000000000000000 // 67 microcode\microcode.us:52 jump_type jump_target
0110011000100000000000000000000000000000010000000000000000000000 // 68 microcode\push.us:61 ra_sel jump_type jump_target
0101101111100000000000000000000010010000100000000000110000000000 // 69 microcode\mul.us:70 mar_write mar_wr_sel ra_modrm_rm_reg segment jump_type jump_target
0110011010000000000000000000000000000000010000000000000000000000 // 6a microcode\push.us:70 ra_sel jump_type jump_target
0101101111100000000000000000000010010000100000000000110000000000 // 6b microcode\mul.us:59 mar_write mar_wr_sel ra_modrm_rm_reg segment jump_type jump_target
0100100000000000000000000000000000000000000000000000000000000000 // 6c microcode\io.us:106 jump_type jump_target
0100100110100000000000000000000000000000000000000000000000000000 // 6d microcode\io.us:132 jump_type jump_target
0100010100000000000000000000000000000000000000000000000000000000 // 6e microcode\io.us:58 jump_type jump_target
0100011010000000000000000000000000000000000000000000000000000000 // 6f microcode\io.us:82 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 70 microcode\jmp.us:54 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 71 microcode\jmp.us:55 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 72 microcode\jmp.us:56 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 73 microcode\jmp.us:57 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 74 microcode\jmp.us:58 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 75 microcode\jmp.us:59 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 76 microcode\jmp.us:60 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 77 microcode\jmp.us:61 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 78 microcode\jmp.us:62 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 79 microcode\jmp.us:63 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 7a microcode\jmp.us:64 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 7b microcode\jmp.us:65 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 7c microcode\jmp.us:66 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 7d microcode\jmp.us:67 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 7e microcode\jmp.us:68 jump_type jump_target
0100110011100000000000000000000000000000000000000000000000000000 // 7f microcode\jmp.us:69 jump_type jump_target
1000011101100000000000000000000110010000000000000000000000000000 // 80 microcode\microcode.us:70 mar_write mar_wr_sel jump_type jump_target
1000011101100000000000000000000110010000000000000000000000000000 // 81 microcode\microcode.us:85 mar_write mar_wr_sel jump_type jump_target
1000011101100000000000000000000110010000000000000000000000000000 // 82 microcode\microcode.us:90 mar_write mar_wr_sel jump_type jump_target
1000100001100000000000000000000110010000000000000000000000000000 // 83 microcode\microcode.us:95 mar_write mar_wr_sel jump_type jump_target
1000000000100000000000000000000010010000100000000000110000000010 // 84 microcode\test.us:8 mar_write mar_wr_sel width segment ra_modrm_rm_reg jump_type jump_target
1000000000100000000000000000000010010000100000000000110000000010 // 85 microcode\test.us:8 mar_write mar_wr_sel width segment ra_modrm_rm_reg jump_type jump_target
1000000101100000000000000000000010010000100000000000110000000010 // 86 microcode\xchg.us:6 width mar_write mar_wr_sel ra_modrm_rm_reg jump_type segment jump_target
1000000101100000000000000000000010010000100000000000110000000000 // 87 microcode\xchg.us:9 mar_write mar_wr_sel ra_modrm_rm_reg jump_type segment jump_target
0101001011100000000000000000000010010000000000000000000000000001 // 88 microcode\mov.us:6 mar_write mar_wr_sel width jump_type jump_target
0101001011100000000000000000000010010000000000000000000000000000 // 89 microcode\mov.us:9 mar_write mar_wr_sel jump_type jump_target
0101001100100000000000000000000010010000100000000000110000000001 // 8a microcode\mov.us:19 mar_write mar_wr_sel ra_modrm_rm_reg width jump_type segment a_sel jump_target
0101001100100000000000000000000010010000100000000000110000000000 // 8b microcode\mov.us:23 mar_write mar_wr_sel ra_modrm_rm_reg jump_type a_sel segment jump_target
0101010110000000000000000000000110010000000000000000000000000000 // 8c microcode\mov.us:122 mar_write mar_wr_sel jump_type jump_target
0100111000000000000000000000000010010000000000000000110000000000 // 8d microcode\lea.us:6 mar_write mar_wr_sel segment jump_type jump_target
0101010100100000000000000000000010010000100000000000110000000000 // 8e microcode\mov.us:109 mar_write mar_wr_sel ra_modrm_rm_reg segment jump_type jump_target
1000100101100000000000000000000110010000000000000000100000000000 // 8f microcode\microcode.us:109 mar_write mar_wr_sel segment jump_type jump_target
0001001000100000000000000000000000000001000000000000000000000000 // 90 microcode\xchg.us:29 next_instruction
1000001001000000000000000000000000000000000100000000000000000000 // 91 microcode\xchg.us:31 ra_sel jump_type jump_target
1000001010100000000000000000000000000000001000000000000000000000 // 92 microcode\xchg.us:32 ra_sel jump_type jump_target
1000001100000000000000000000000000000000001100000000000000000000 // 93 microcode\xchg.us:33 ra_sel jump_type jump_target
1000001101100000000000000000000000000000010000000000000000000000 // 94 microcode\xchg.us:34 ra_sel jump_type jump_target
1000001111000000000000000000000000000000010100000000000000000000 // 95 microcode\xchg.us:35 ra_sel jump_type jump_target
1000010000100000000000000000000000000000011000000000000000000000 // 96 microcode\xchg.us:36 ra_sel jump_type jump_target
1000010010000000000000000000000000000000011100000000000000000000 // 97 microcode\xchg.us:37 ra_sel jump_type jump_target
0011110001100000000000000000000000000000000000000000000000000001 // 98 microcode\extend.us:6 width ra_sel jump_type jump_target
0011110010000000000000000000000000000000000000000000000000000000 // 99 microcode\extend.us:14 ra_sel jump_type jump_target
0010111100000000001001000000000001001000000000000000010000000000 // 9a microcode\call.us:31 jump_type mdr_write b_sel alu_op load_ip segment jump_target
0001001110000000000000000000000000000001000000000000000000000000 // 9b microcode\wait.us:6 next_instruction
0110011011100001011000000000000000001000010000000000000000000000 // 9c microcode\push.us:79 alu_op mdr_write ra_sel jump_type jump_target
0110010000000000000000000000000000000000010000000000000000000000 // 9d microcode\pop.us:38 ra_sel jump_type jump_target
0011110010100000000000000000000000000000010000000000000000000001 // 9e microcode\flags.us:45 ra_sel width jump_type jump_target
0001010000000001011000000000000000000001000001001100000000000001 // 9f microcode\flags.us:40 alu_op rd_sel_source rd_sel width next_instruction
0101010011000000001001000000000000110000000000000000110000000000 // a0 microcode\mov.us:88 mar_write mar_wr_sel b_sel alu_op jump_type segment jump_target
0101010011000000001001000000000000110000000000000000110000000000 // a1 microcode\mov.us:91 mar_write mar_wr_sel b_sel alu_op jump_type segment jump_target
0101010100000000001001000000000000110000000000000000000000000000 // a2 microcode\mov.us:100 mar_write mar_wr_sel b_sel alu_op jump_type ra_sel jump_target
0101010100000000001001000000000000110000000000000000000000000000 // a3 microcode\mov.us:102 mar_write mar_wr_sel b_sel alu_op jump_type ra_sel jump_target
0101011011000000000000000000000000000000000000000000000000000000 // a4 microcode\movs.us:6 jump_type jump_target
0101100000100000000000000000000000000000000000000000000000000000 // a5 microcode\movs.us:35 jump_type jump_target
0011001101100000000000000000000000000000000000000000000000000000 // a6 microcode\cmps.us:6 jump_type jump_target
0011010011100000000000000000000000000000000000000000000000000000 // a7 microcode\cmps.us:36 jump_type jump_target
1000000010000000000000000000000000000000000000000000000000000010 // a8 microcode\test.us:9 width ra_sel jump_type jump_target
1000000010000000000000000000000000000000000000000000000000000010 // a9 microcode\test.us:9 width ra_sel jump_type jump_target
0111101111100000000000000000000000000000000000000000000000000001 // aa microcode\stos.us:6 width ra_sel jump_type jump_target
0111110101000000000000000000000000000000000000000000000000000000 // ab microcode\stos.us:28 ra_sel jump_type jump_target
0100111110000000000000000000000000000000000000000000000000000000 // ac microcode\lods.us:6 jump_type jump_target
0101000010000000000000000000000000000000000000000000000000000000 // ad microcode\lods.us:26 jump_type jump_target
0111011100100000000000000000000000000000011100000000000000000000 // ae microcode\scas.us:6 jump_type ra_sel jump_target
0111100000100000000000000000000000000000011100000000000000000000 // af microcode\scas.us:32 jump_type ra_sel jump_target
0001011000100000001001000000000000000001000000001100000000000001 // b0 microcode\mov.us:63 rd_sel_source rd_sel alu_op b_sel width next_instruction
0001011001000000001001000000000000000001000000011100000000000001 // b1 microcode\mov.us:64 rd_sel_source rd_sel alu_op b_sel width next_instruction
0001011001100000001001000000000000000001000000101100000000000001 // b2 microcode\mov.us:65 rd_sel_source rd_sel alu_op b_sel width next_instruction
0001011010000000001001000000000000000001000000111100000000000001 // b3 microcode\mov.us:66 rd_sel_source rd_sel alu_op b_sel width next_instruction
0001011010100000001001000000000000000001000001001100000000000001 // b4 microcode\mov.us:67 rd_sel_source rd_sel alu_op b_sel width next_instruction
0001011011000000001001000000000000000001000001011100000000000001 // b5 microcode\mov.us:68 rd_sel_source rd_sel alu_op b_sel width next_instruction
0001011011100000001001000000000000000001000001101100000000000001 // b6 microcode\mov.us:69 rd_sel_source rd_sel alu_op b_sel width next_instruction
0001011100000000001001000000000000000001000001111100000000000001 // b7 microcode\mov.us:70 rd_sel_source rd_sel alu_op b_sel width next_instruction
0001011100100000001001000000000000000001000000001100000000000000 // b8 microcode\mov.us:77 rd_sel_source rd_sel alu_op b_sel next_instruction
0001011101000000001001000000000000000001000000011100000000000000 // b9 microcode\mov.us:78 rd_sel_source rd_sel alu_op b_sel next_instruction
0001011101100000001001000000000000000001000000101100000000000000 // ba microcode\mov.us:79 rd_sel_source rd_sel alu_op b_sel next_instruction
0001011110000000001001000000000000000001000000111100000000000000 // bb microcode\mov.us:80 rd_sel_source rd_sel alu_op b_sel next_instruction
0001011110100000001001000000000000000001000001001100000000000000 // bc microcode\mov.us:81 rd_sel_source rd_sel alu_op b_sel next_instruction
0001011111000000001001000000000000000001000001011100000000000000 // bd microcode\mov.us:82 rd_sel_source rd_sel alu_op b_sel next_instruction
0001011111100000001001000000000000000001000001101100000000000000 // be microcode\mov.us:83 rd_sel_source rd_sel alu_op b_sel next_instruction
0001100000000000001001000000000000000001000001111100000000000000 // bf microcode\mov.us:84 rd_sel_source rd_sel alu_op b_sel next_instruction
1000101101100000000000000000000110010000000000000000000000000001 // c0 microcode\microcode.us:137 width mar_write mar_wr_sel jump_type jump_target
1000110001100000000000000000000110010000000000000000000000000000 // c1 microcode\microcode.us:160 mar_write mar_wr_sel jump_type jump_target
0110111001000000000000000000000000000000010000000000000000000000 // c2 microcode\ret.us:17 ra_sel jump_type jump_target
0110110111100000000000000000000000000000010000000000000000000000 // c3 microcode\ret.us:6 ra_sel jump_type jump_target
0100111011000000000000000000000010010000000000000000110000000000 // c4 microcode\les.us:6 mar_write mar_wr_sel segment jump_type jump_target
0100110101000000000000000000000010010000000000000000110000000000 // c5 microcode\lds.us:6 mar_write mar_wr_sel segment jump_type jump_target
0101001110000000000000000000000110010000000000000000000000000000 // c6 microcode\mov.us:37 mar_write mar_wr_sel jump_type jump_target
0101001110000000000000000000000110010000000000000000000000000000 // c7 microcode\mov.us:40 mar_write mar_wr_sel jump_type jump_target
0011100111100000001001000000000000000000010000000000000010000000 // c8 microcode\enter.us:6 b_sel alu_op tmp_wr_en ra_sel jump_type jump_target
0100111001000000000000000000000000000000010100000000000000000000 // c9 microcode\leave.us:6 ra_sel jump_type jump_target
0110111101100000000000000000000000000000010000000000000000000000 // ca microcode\ret.us:45 ra_sel jump_type jump_target
0110111011000000000000000000000000000000010000000000000000000000 // cb microcode\ret.us:30 ra_sel jump_type jump_target
0010010110100000001001001000000000000000000000000000000010000000 // cc microcode\int.us:6 b_sel immediate alu_op tmp_wr_en jump_type jump_target
0100000011000000001001000000000000110000000000000000000000000000 // cd microcode\int.us:10 b_sel alu_op mar_wr_sel mar_write jump_type jump_target
0100000100000001011000000000000000001000000000000000000000000000 // ce microcode\int.us:20 alu_op mdr_write jump_type jump_target
0111000000100000000000000000000000000000010000000000000000000000 // cf microcode\ret.us:62 ra_sel jump_type jump_target
1000101001100000000000000000000110010000000000000000000000000010 // d0 microcode\microcode.us:123 width mar_write mar_wr_sel jump_type jump_target
1000101001100000000000000000000110010000000000000000000000000000 // d1 microcode\microcode.us:174 mar_write mar_wr_sel jump_type jump_target
1000110101100000000000000000000110010000000000000000000000000010 // d2 microcode\microcode.us:178 width mar_write mar_wr_sel jump_type jump_target
1000110101100000000000000000000110010000000000000000000000000000 // d3 microcode\microcode.us:192 mar_write mar_wr_sel jump_type jump_target
0011100100000000001001000000000000001000100000000000000000000001 // d4 microcode\div.us:52 width ra_modrm_rm_reg b_sel alu_op mdr_write jump_type jump_target
0010011000100000000000000000000000000000010000000000000000000001 // d5 microcode\aad.us:6 width ra_sel jump_type jump_target
0011110011000000000000000000000000000000000110000000000000000000 // d6 microcode\flags.us:52 ra_sel rb_cl jump_type jump_target
1000010011100000000000000000000000000000000000000000000000000001 // d7 microcode\xlat.us:6 width ra_sel jump_type jump_target
0011110001000000000000000000000000000000000000000000000000000000 // d8 microcode\esc.us:10 jump_type jump_target
0011110001000000000000000000000000000000000000000000000000000000 // d9 microcode\esc.us:12 jump_type jump_target
0011110001000000000000000000000000000000000000000000000000000000 // da microcode\esc.us:14 jump_type jump_target
0011110001000000000000000000000000000000000000000000000000000000 // db microcode\esc.us:16 jump_type jump_target
0011110001000000000000000000000000000000000000000000000000000000 // dc microcode\esc.us:18 jump_type jump_target
0011110001000000000000000000000000000000000000000000000000000000 // dd microcode\esc.us:20 jump_type jump_target
0011110001000000000000000000000000000000000000000000000000000000 // de microcode\esc.us:22 jump_type jump_target
0011110001000000000000000000000000000000000000000000000000000000 // df microcode\esc.us:24 jump_type jump_target
0101001010000000000000000000000000000000000100000000000000000000 // e0 microcode\loop.us:34 ra_sel jump_type jump_target
0101001000000000000000000000000000000000000100000000000000000000 // e1 microcode\loop.us:20 ra_sel jump_type jump_target
0101000110000000000000000000000000000000000100000000000000000000 // e2 microcode\loop.us:6 ra_sel jump_type jump_target
0100110010000000000000000000000000000000000010000000000000000000 // e3 microcode\jmp.us:41 rb_cl jump_type jump_target
0100010001000000001001000000000000110000000000000000000000000001 // e4 microcode\io.us:32 width b_sel alu_op mar_wr_sel mar_write jump_type jump_target
0100010001000000001001000000000000110000000000000000000000000001 // e5 microcode\io.us:35 width b_sel alu_op mar_wr_sel mar_write jump_type jump_target
0100001110000000001001000000000000110000000000000000000000000001 // e6 microcode\io.us:6 width b_sel alu_op mar_wr_sel mar_write jump_type ra_sel jump_target
0100001110000000001001000000000000110000000000000000000000000001 // e7 microcode\io.us:10 width b_sel alu_op mar_wr_sel mar_write jump_type jump_target
0010110111100000000000000000000000000000010000000000000000000000 // e8 microcode\call.us:6 jump_type ra_sel jump_target
0001110101001000010001000000000001000001000000000000000000000000 // e9 microcode\jmp.us:6 a_sel b_sel alu_op load_ip next_instruction
0100101101000000001001000000000001000000000000000000000000000000 // ea microcode\jmp.us:10 b_sel alu_op load_ip jump_type jump_target
0001110110001000010001000000000001000001000000000000000000000000 // eb microcode\jmp.us:17 a_sel b_sel alu_op load_ip next_instruction
0100010010100000000000000000000000000000001000000000000000000000 // ec microcode\io.us:46 ra_sel jump_type jump_target
0100010010100000000000000000000000000000001000000000000000000000 // ed microcode\io.us:49 ra_sel jump_type jump_target
0100001111100000000000000000000000000000000000000000000000000001 // ee microcode\io.us:20 width ra_sel jump_type jump_target
0100001111100000000000000000000000000000000000000000000000000000 // ef microcode\io.us:23 ra_sel jump_type jump_target
0001111000100000000000000000000000000001000000000000000000000000 // f0 microcode\microcode.us:59 next_instruction
1000011101000000000000000000000000000000000000000000000000000000 // f1 microcode\microcode.us:53 jump_type jump_target
0001111001100000000000000000000000000001000000000000000000000000 // f2 microcode\microcode.us:60 next_instruction
0001111010000000000000000000000000000001000000000000000000000000 // f3 microcode\microcode.us:61 next_instruction
0011110011100000000000000000000000000000000000000000000000000000 // f4 microcode\hlt.us:6 jump_type jump_target
0001111011000001110000000000000000000001000000000000000000010100 // f5 microcode\flags.us:36 alu_op update_flags next_instruction
1000111001100000000000000000000110010000000000000000000000000001 // f6 microcode\microcode.us:196 width mar_write mar_wr_sel jump_type jump_target
1000111101100000000000000000000110010000000000000000000000000000 // f7 microcode\microcode.us:210 mar_write mar_wr_sel jump_type jump_target
0001111100100001100001000001000000000001000000000000000000010100 // f8 microcode\flags.us:6 b_sel immediate alu_op update_flags next_instruction
0001111101000001100001000111000000000001000000000000000000010100 // f9 microcode\flags.us:11 b_sel immediate alu_op update_flags next_instruction
0001111101100001100001100001000000000001000000000000000000011100 // fa microcode\flags.us:16 b_sel immediate alu_op update_flags ext_int_inhibit next_instruction
0001111110000001100001100111000000000001000000000000000000011100 // fb microcode\flags.us:21 b_sel immediate alu_op update_flags ext_int_inhibit next_instruction
0001111110100001100001000001000000000001000000000000000000100000 // fc microcode\flags.us:26 b_sel immediate alu_op update_flags next_instruction
0001111111000001100001000111000000000001000000000000000000100000 // fd microcode\flags.us:31 b_sel immediate alu_op update_flags next_instruction
0011110100000000000000000000000110010000000000000000000000000001 // fe microcode\inc.us:6 width mar_write mar_wr_sel jump_type jump_target
1001000001100000000000000000000110010000000000000000110000000000 // ff microcode\microcode.us:224 mar_write mar_wr_sel segment jump_type jump_target
0010000000100000000000010000000100000000000000000000000000000000 // 100 microcode\microcode.us:11 ext_int_yield jump_type jump_target
0010010110100000001001000001000000000000000000000000000010000000 // 101 microcode\microcode.us:17 b_sel immediate alu_op tmp_wr_en jump_type jump_target
0010000001000000000000000000000000000000000000000000000000000000 // 102 microcode\debug.us:7 jump_type jump_target
1001001101000000000000000000000000000000000000000000000000000000 // 103 microcode\debug.us:9 ra_sel jump_type jump_target
1001001101000000000000000000000000000000000100000000000000000000 // 104 microcode\debug.us:10 ra_sel jump_type jump_target
1001001101000000000000000000000000000000001000000000000000000000 // 105 microcode\debug.us:11 ra_sel jump_type jump_target
1001001101000000000000000000000000000000001100000000000000000000 // 106 microcode\debug.us:12 ra_sel jump_type jump_target
1001001101000000000000000000000000000000010000000000000000000000 // 107 microcode\debug.us:13 ra_sel jump_type jump_target
1001001101000000000000000000000000000000010100000000000000000000 // 108 microcode\debug.us:14 ra_sel jump_type jump_target
1001001101000000000000000000000000000000011000000000000000000000 // 109 microcode\debug.us:15 ra_sel jump_type jump_target
1001001101000000000000000000000000000000011100000000000000000000 // 10a microcode\debug.us:16 ra_sel jump_type jump_target
1001001101100000000000000000000000000000000000000000001000000000 // 10b microcode\debug.us:17 segment_force segment jump_type jump_target
1001001101100000000000000000000000000000000000000000011000000000 // 10c microcode\debug.us:18 segment_force segment jump_type jump_target
1001001101100000000000000000000000000000000000000000101000000000 // 10d microcode\debug.us:19 segment_force segment jump_type jump_target
1001001101100000000000000000000000000000000000000000111000000000 // 10e microcode\debug.us:20 segment_force segment jump_type jump_target
0010000001001000000000000000000000000000000000000000000010000000 // 10f microcode\debug.us:44 a_sel alu_op tmp_wr_en jump_type jump_target
0010000001000001011000000000000000000000000000000000000010000000 // 110 microcode\debug.us:48 alu_op tmp_wr_en jump_type jump_target
0010000001000000001011100000000001000001000000000000000000000000 // 111 microcode\debug.us:52 b_sel alu_op load_ip next_instruction ext_int_inhibit jump_type jump_target
0010000001000001100011000000000000000000000000000000000000110000 // 112 microcode\debug.us:57 b_sel alu_op update_flags jump_type jump_target
0010000001000000001011000000000000000000000000001100000000000000 // 113 microcode\debug.us:22 b_sel alu_op rd_sel_source rd_sel jump_type jump_target
0010000001000000001011000000000000000000000000011100000000000000 // 114 microcode\debug.us:23 b_sel alu_op rd_sel_source rd_sel jump_type jump_target
0010000001000000001011000000000000000000000000101100000000000000 // 115 microcode\debug.us:24 b_sel alu_op rd_sel_source rd_sel jump_type jump_target
0010000001000000001011000000000000000000000000111100000000000000 // 116 microcode\debug.us:25 b_sel alu_op rd_sel_source rd_sel jump_type jump_target
0010000001000000001011000000000000000000000001001100000000000000 // 117 microcode\debug.us:26 b_sel alu_op rd_sel_source rd_sel jump_type jump_target
0010000001000000001011000000000000000000000001011100000000000000 // 118 microcode\debug.us:27 b_sel alu_op rd_sel_source rd_sel jump_type jump_target
0010000001000000001011000000000000000000000001101100000000000000 // 119 microcode\debug.us:28 b_sel alu_op rd_sel_source rd_sel jump_type jump_target
0010000001000000001011000000000000000000000001111100000000000000 // 11a microcode\debug.us:29 b_sel alu_op rd_sel_source rd_sel jump_type jump_target
0010000001000000001011100000000000000001000000000000001100000000 // 11b microcode\debug.us:30 b_sel alu_op segment_force segment_wr_en segment next_instruction ext_int_inhibit jump_type jump_target
0010000001000000001011100000000000000001000000000000011100000000 // 11c microcode\debug.us:31 b_sel alu_op segment_force segment_wr_en segment next_instruction ext_int_inhibit jump_type jump_target
0010000001000000001011100000000000000001000000000000101100000000 // 11d microcode\debug.us:32 b_sel alu_op segment_force segment_wr_en segment next_instruction ext_int_inhibit jump_type jump_target
0010000001000000001011100000000000000001000000000000111100000000 // 11e microcode\debug.us:33 b_sel alu_op segment_force segment_wr_en segment next_instruction ext_int_inhibit jump_type jump_target
0010000001000000001011000000000000110000000000000000000000000000 // 11f microcode\debug.us:62 b_sel alu_op mar_wr_sel mar_write jump_type jump_target
0010000001000000001011000000000000001000000000000000000000000000 // 120 microcode\debug.us:66 b_sel alu_op mdr_write jump_type jump_target
1001001110000000000000000000000000000000000000000000111000000000 // 121 microcode\debug.us:70 segment_force segment jump_type jump_target
1001001111100000000000000000000000000000000000000000111000000000 // 122 microcode\debug.us:80 segment_force segment jump_type jump_target
1001010001000000000000000000000000000000000000000000111000000000 // 123 microcode\debug.us:90 segment_force segment jump_type jump_target
1001010010000000000000000000000000000000000000000000111000000000 // 124 microcode\debug.us:99 segment_force segment jump_type jump_target
1001010011000000000000000000000000000000000000000000111000000000 // 125 microcode\debug.us:108 segment_force segment jump_type jump_target
1001010100000000000000000000000000000000000000000000111000000000 // 126 microcode\debug.us:116 segment_force segment jump_type jump_target
1001010101000000000000000000000000000000000000000000111000000000 // 127 microcode\debug.us:124 segment_force segment jump_type jump_target
1001010101100000000000000000000000000000000000000000111000000000 // 128 microcode\debug.us:131 segment_force segment jump_type jump_target
1001000101100000000000000000000000000000000000000000000000000000 // 129 microcode\microcode.us:237 jump_type jump_target
0010010110100000001001001100000000000000000000000000000010000000 // 12a microcode\microcode.us:30 b_sel immediate alu_op tmp_wr_en jump_type jump_target
0010010110111011100001001010000000000000000000000000000010000000 // 12b microcode\microcode.us:23 a_sel b_sel immediate alu_op tmp_wr_en jump_type jump_target
0010010110100000001001001010000000000000000000000000000010000000 // 12c microcode\microcode.us:36 b_sel immediate alu_op tmp_wr_en jump_type jump_target
0100000101100001011000000000000000001000010000000000000000000000 // 12d microcode\int.us:31 alu_op mdr_write ra_sel jump_type jump_target
0010010111100000000000000000000100000000000000000000000000000000 // 12e microcode\microcode.us:41 jump_type jump_target
1000011101000000000000000000000000000000000000000000000000000000 // 12f microcode\microcode.us:45 jump_type jump_target
0010011000100011000000000000000000000001000000001100000000000100 // 130 microcode\aaa.us:9 a_sel alu_op rd_sel_source rd_sel update_flags next_instruction
0010011001000011101001000000000000000000000000000000000010000000 // 131 microcode\aad.us:9 a_sel b_sel alu_op tmp_wr_en
0010011001100000000000000000000000000000000000000000000000000001 // 132 microcode\aad.us:10 width ra_sel
0010011010000000010011000000000000000000000000001100000000001000 // 133 microcode\aad.us:11 a_sel b_sel alu_op update_flags rd_sel_source rd_sel
0010011010100000001001000001000000000001000001001100000000000001 // 134 microcode\aad.us:13 width b_sel immediate alu_op rd_sel_source rd_sel next_instruction
0010011011000011001000000000000000000001000000001100000000000100 // 135 microcode\aas.us:9 a_sel alu_op rd_sel_source rd_sel update_flags next_instruction
0010011011100000011000000000000000000001000000001000000000001110 // 136 microcode\adc.us:8 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0010011100000000000000000000000000000100000000000000110000000010 // 137 microcode\adc.us:8 segment mem_read width
1001001100111000011000000000000000001000000000000000110000001110 // 138 microcode\adc.us:8 a_sel b_sel alu_op mdr_write update_flags width segment jump_type jump_target
0010011101000000011000000000000000000001000000000100000000001110 // 139 microcode\adc.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0010011101100000000000000000000000000100000000000000110000000010 // 13a microcode\adc.us:9 segment mem_read width
0010011110011000011000000000000000000001000000000100000000001110 // 13b microcode\adc.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0010011110100000011001000000000000000001000000001100000000001110 // 13c microcode\adc.us:10 a_sel b_sel alu_op rd_sel_source rd_sel update_flags width next_instruction
0010011111000000011001000000000000000001000000001000000000001110 // 13d microcode\adc.us:11 a_sel b_sel alu_op rd_sel_source width update_flags next_instruction
0010011111100000000000000000000000000100000000000000110000000010 // 13e microcode\adc.us:11 segment mem_read width
1001001100111000011001000000000000001000000000000000110000001110 // 13f microcode\adc.us:11 a_sel b_sel alu_op mdr_write update_flags segment width jump_type jump_target
0010100001000000000000000000000000000000100000000000000000000000 // 140 microcode\adc.us:12 ra_modrm_rm_reg jump_type jump_target
0010100001100000000000000000000000000000100000000000110000000000 // 141 microcode\adc.us:12 ra_modrm_rm_reg segment jump_type jump_target
0010100001100000011001000000000000000001000000001000000000001100 // 142 microcode\adc.us:12 a_sel b_sel alu_op rd_sel_source update_flags next_instruction
0010100010000000000000000000000000000100000000000000110000000000 // 143 microcode\adc.us:12 segment mem_read
1001001100011000011001000000000000001000000000000000110000001100 // 144 microcode\adc.us:12 a_sel b_sel alu_op mdr_write update_flags segment jump_type jump_target
0010100011000000010000000000000000000001000000001000000000001110 // 145 microcode\add.us:8 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0010100011100000000000000000000000000100000000000000110000000010 // 146 microcode\add.us:8 segment mem_read width
1001001100111000010000000000000000001000000000000000110000001110 // 147 microcode\add.us:8 a_sel b_sel alu_op mdr_write update_flags width segment jump_type jump_target
0010100100100000010000000000000000000001000000000100000000001110 // 148 microcode\add.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0010100101000000000000000000000000000100000000000000110000000010 // 149 microcode\add.us:9 segment mem_read width
0010100101111000010000000000000000000001000000000100000000001110 // 14a microcode\add.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0010100110000000010001000000000000000001000000001100000000001110 // 14b microcode\add.us:10 a_sel b_sel alu_op rd_sel_source rd_sel update_flags width next_instruction
0010100110100000010001000000000000000001000000001000000000001110 // 14c microcode\add.us:11 a_sel b_sel alu_op rd_sel_source width update_flags next_instruction
0010100111000000000000000000000000000100000000000000110000000010 // 14d microcode\add.us:11 segment mem_read width
1001001100111000010001000000000000001000000000000000110000001110 // 14e microcode\add.us:11 a_sel b_sel alu_op mdr_write update_flags segment width jump_type jump_target
0010101000100000000000000000000000000000100000000000000000000000 // 14f microcode\add.us:12 ra_modrm_rm_reg jump_type jump_target
0010101001000000000000000000000000000000100000000000110000000000 // 150 microcode\add.us:12 ra_modrm_rm_reg segment jump_type jump_target
0010101001000000010001000000000000000001000000001000000000001100 // 151 microcode\add.us:12 a_sel b_sel alu_op rd_sel_source update_flags next_instruction
0010101001100000000000000000000000000100000000000000110000000000 // 152 microcode\add.us:12 segment mem_read
1001001100011000010001000000000000001000000000000000110000001100 // 153 microcode\add.us:12 a_sel b_sel alu_op mdr_write update_flags segment jump_type jump_target
0010101010100000100000000000000000000001000000001000000000010010 // 154 microcode\and.us:8 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0010101011000000000000000000000000000100000000000000110000000010 // 155 microcode\and.us:8 segment mem_read width
1001001100111000100000000000000000001000000000000000110000010010 // 156 microcode\and.us:8 a_sel b_sel alu_op mdr_write update_flags width segment jump_type jump_target
0010101100000000100000000000000000000001000000000100000000010010 // 157 microcode\and.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0010101100100000000000000000000000000100000000000000110000000010 // 158 microcode\and.us:9 segment mem_read width
0010101101011000100000000000000000000001000000000100000000010010 // 159 microcode\and.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0010101101100000100001000000000000000001000000001100000000010010 // 15a microcode\and.us:10 a_sel b_sel alu_op rd_sel_source rd_sel update_flags width next_instruction
0010101110000000100001000000000000000001000000001000000000010010 // 15b microcode\and.us:11 a_sel b_sel alu_op rd_sel_source width update_flags next_instruction
0010101110100000000000000000000000000100000000000000110000000010 // 15c microcode\and.us:11 segment mem_read width
1001001100111000100001000000000000001000000000000000110000010010 // 15d microcode\and.us:11 a_sel b_sel alu_op mdr_write update_flags segment width jump_type jump_target
0010110000000000000000000000000000000000100000000000000000000000 // 15e microcode\and.us:12 ra_modrm_rm_reg jump_type jump_target
0010110000100000000000000000000000000000100000000000110000000000 // 15f microcode\and.us:12 ra_modrm_rm_reg segment jump_type jump_target
0010110000100000100001000000000000000001000000001000000000010000 // 160 microcode\and.us:12 a_sel b_sel alu_op rd_sel_source update_flags next_instruction
0010110001000000000000000000000000000100000000000000110000000000 // 161 microcode\and.us:12 segment mem_read
1001001100011000100001000000000000001000000000000000110000010000 // 162 microcode\and.us:12 a_sel b_sel alu_op mdr_write update_flags segment jump_type jump_target
0010010110100000001001000010000000000000000000000000000010000000 // 163 microcode\bound.us:9 b_sel immediate alu_op tmp_wr_en jump_type jump_target
0010110010100001011000000000000000000100000000000000110010000000 // 164 microcode\bound.us:11 alu_op tmp_wr_en segment mem_read
0010110011011100001000000000000000000000000000000000000000010100 // 165 microcode\bound.us:12 a_sel b_sel alu_op update_flags
0010110101110000010001000011001110110000000000000000110000000000 // 166 microcode\bound.us:13 a_sel b_sel immediate alu_op mar_write mar_wr_sel segment jump_type jump_target
0010110100000000000000000000000000000100000000000000110000000000 // 167 microcode\bound.us:15 segment mem_read
0010110100111100010000000000000000000000000000000000000000010100 // 168 microcode\bound.us:16 a_sel b_sel alu_op update_flags
0010110101100000000000000000001110000000000000000000000000000000 // 169 microcode\bound.us:17 jump_type jump_target
0010110101100001100011000000000000000001000000000000000000010100 // 16a microcode\bound.us:18 b_sel alu_op update_flags next_instruction
0010110110000001100011000000000000000000000000000000000000010100 // 16b microcode\bound.us:21 b_sel alu_op update_flags
0010010110100000001001000100000000000000000000000000000010000000 // 16c microcode\bound.us:22 b_sel immediate alu_op tmp_wr_en jump_type jump_target
0010110111000011010000000000000000000001000000001100000000011000 // 16d microcode\daa.us:9 a_sel alu_op rd_sel_source rd_sel update_flags next_instruction
0010110111100011011000000000000000000001000000001100000000011000 // 16e microcode\das.us:9 a_sel alu_op rd_sel_source rd_sel update_flags next_instruction
0010111000000000111001000011000000110000000001001100000000000000 // 16f microcode\call.us:9 a_sel b_sel immediate alu_op rd_sel rd_sel_source mar_write mar_wr_sel
0010111000101000000000000000000000001000010000000000101000000000 // 170 microcode\call.us:12 a_sel alu_op mdr_write ra_sel segment segment_force
0010111001001000010001000000000001000011000000000000101000000000 // 171 microcode\call.us:13 segment segment_force mem_write a_sel b_sel alu_op load_ip next_instruction
0010111010100000000000000000000001000000010000000000000000000000 // 172 microcode\call.us:17 a_sel alu_op load_ip jump_type ra_sel jump_target
0010111010000000000000000000000000000100000000000000110000000000 // 173 microcode\call.us:20 segment mem_read
0010111010111000000000000000000001000000010000000000000000000000 // 174 microcode\call.us:21 a_sel alu_op load_ip jump_type ra_sel jump_target
0010111011000000111001000011000000110000000001001100000000000000 // 175 microcode\call.us:24 a_sel b_sel immediate alu_op rd_sel rd_sel_source mar_write mar_wr_sel
0010111011101000000000000000000000001000010000000000101000000000 // 176 microcode\call.us:27 a_sel alu_op mdr_write ra_sel segment segment_force
0010111100000000000000000000000000000011000000000000101000000000 // 177 microcode\call.us:28 segment segment_force mem_write next_instruction
0010111100100000001010000000000000001000010000000000000000000000 // 178 microcode\call.us:35 b_sel alu_op mdr_write ra_sel
0010111101000000111001000011000000110000000001001100101000000000 // 179 microcode\call.us:36 a_sel b_sel immediate alu_op rd_sel rd_sel_source mar_write mar_wr_sel segment_force segment
0010111101100000000000000000000000000010010000000000101000000000 // 17a microcode\call.us:39 segment_force segment mem_write ra_sel
0010111110000000111001000011000000110000000001001100000000000000 // 17b microcode\call.us:40 a_sel b_sel immediate alu_op rd_sel rd_sel_source mar_write mar_wr_sel
0010111110101000000000000000000000001000000000000000101000000000 // 17c microcode\call.us:43 a_sel alu_op mdr_write segment_force segment
0010111111000000000000000000000000000010000000000000101000000000 // 17d microcode\call.us:44 segment_force segment mem_write
0010111111100000001100000000000000000001000000000000011100000000 // 17e microcode\call.us:45 b_sel alu_op segment_force segment segment_wr_en next_instruction
0011000000000000000000000000000000000001000000000000000000000000 // 17f microcode\call.us:49 next_instruction
0011000000100000001010000000000000001000010000000000000000000000 // 180 microcode\call.us:51 b_sel alu_op mdr_write ra_sel
0011000001000000111001000011000000110000000001001100101000000000 // 181 microcode\call.us:52 a_sel b_sel immediate alu_op rd_sel rd_sel_source mar_write mar_wr_sel segment_force segment
0011000001100000000000000000000000000010010000000000101000000000 // 182 microcode\call.us:55 segment_force segment mem_write ra_sel
0011000010000000111001000011000000110000000001001100000000000000 // 183 microcode\call.us:56 a_sel b_sel immediate alu_op rd_sel rd_sel_source mar_write mar_wr_sel
0011000010101000000000000000000000001000000000000000101000000000 // 184 microcode\call.us:59 a_sel alu_op mdr_write segment_force segment
0011000011000000000000000000000000000010000000000000101000000000 // 185 microcode\call.us:60 segment_force segment mem_write
0011000011100000000000000000000000010000000000000000110000000000 // 186 microcode\call.us:61 mar_wr_sel mar_write segment
0011000100000000000000000000000000000100000000000000110000000000 // 187 microcode\call.us:62 segment mem_read
0011000100111000000000000000000001000000000000000000000000000000 // 188 microcode\call.us:63 a_sel alu_op load_ip
0011000101010000010001000011000000110000000000000000110000000000 // 189 microcode\call.us:64 a_sel b_sel immediate alu_op mar_wr_sel mar_write segment
0011000101100000000000000000000000000100000000000000110000000000 // 18a microcode\call.us:66 segment mem_read
0011000110011000000000000000000000000001000000000000011100000000 // 18b microcode\call.us:67 a_sel alu_op segment_wr_en segment_force segment next_instruction
0011000110100000111000000000000000000001000000000000000000001110 // 18c microcode\cmp.us:8 a_sel b_sel alu_op update_flags width next_instruction
0011000111000000000000000000000000000100000000000000110000000010 // 18d microcode\cmp.us:8 segment mem_read width
0011000111111000111000000000000000000001000000000000000000001110 // 18e microcode\cmp.us:8 a_sel b_sel alu_op update_flags width next_instruction
0011001000000001000000000000000000000001000000000000000000001110 // 18f microcode\cmp.us:9 a_sel b_sel alu_op update_flags width next_instruction
0011001000100000000000000000000000000100000000000000110000000010 // 190 microcode\cmp.us:9 segment mem_read width
0011001001011001000000000000000000000001000000000000000000001110 // 191 microcode\cmp.us:9 a_sel b_sel alu_op update_flags width next_instruction
0011001001100000111001000000000000000001000000000000000000001110 // 192 microcode\cmp.us:10 a_sel b_sel alu_op update_flags width next_instruction
0011001010000000111001000000000000000001000000000000000000001110 // 193 microcode\cmp.us:11 a_sel b_sel alu_op update_flags width next_instruction
0011001010100000000000000000000000000100000000000000110000000010 // 194 microcode\cmp.us:11 segment mem_read width
0011001011011000111001000000000000000001000000000000000000001110 // 195 microcode\cmp.us:11 a_sel b_sel alu_op update_flags width next_instruction
0011001100000000000000000000000000000000100000000000000000000000 // 196 microcode\cmp.us:12 ra_modrm_rm_reg jump_type jump_target
0011001100100000000000000000000000000000100000000000110000000000 // 197 microcode\cmp.us:12 ra_modrm_rm_reg segment jump_type jump_target
0011001100100000111001000000000000000001000000000000000000001100 // 198 microcode\cmp.us:12 a_sel b_sel alu_op update_flags next_instruction
0011001101000000000000000000000000000100000000000000110000000000 // 199 microcode\cmp.us:12 segment mem_read
0011001101111000111001000000000000000001000000000000000000001100 // 19a microcode\cmp.us:12 a_sel b_sel alu_op update_flags next_instruction
0011001111000000000000000000001000000000011110000000000000000000 // 19b microcode\cmps.us:10 ra_sel rb_cl jump_type jump_target
0011010011000000000000000000010000000000000100000000000000000000 // 19c microcode\cmps.us:12 ra_sel jump_type jump_target
0011001111000000111001000101000000000000011100011100000000000000 // 19d microcode\cmps.us:13 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel
0011001111100000000000000000000000110000011100000000001000000000 // 19e microcode\cmps.us:16 ra_sel a_sel alu_op mar_wr_sel mar_write segment segment_force
0011010000011000000000000000000000000100000000000000001010000001 // 19f microcode\cmps.us:18 width segment segment_force mem_read a_sel alu_op tmp_wr_en
0011010000110010111001000101000000000000011001111100000000000000 // 1a0 microcode\cmps.us:20 a_sel b_sel immediate alu_op rd_sel_source rd_sel ra_sel
0011010001000000000000000000000000110000011000000000110000000000 // 1a1 microcode\cmps.us:23 a_sel alu_op mar_wr_sel mar_write segment ra_sel
0011010001100010111001000101000000000000000001101100110000000000 // 1a2 microcode\cmps.us:24 a_sel b_sel immediate alu_op rd_sel_source rd_sel segment
0011010010000000000000000000000000000100000000000000110000000001 // 1a3 microcode\cmps.us:27 width segment mem_read
0011010011011000111011000000001000000000000000000000000000001101 // 1a4 microcode\cmps.us:28 width a_sel b_sel alu_op update_flags jump_type jump_target
0011001110000001011000010000001100000000000010000000000000000000 // 1a5 microcode\cmps.us:30 rb_cl alu_op ext_int_yield jump_type jump_target
0011010011100000000000000000000000000001000000000000000000000000 // 1a6 microcode\cmps.us:33 next_instruction
0011010101000000000000000000001000000000011110000000000000000000 // 1a7 microcode\cmps.us:40 ra_sel rb_cl jump_type jump_target
0011011000100000000000000000010000000000000100000000000000000000 // 1a8 microcode\cmps.us:42 ra_sel jump_type jump_target
0011010101000000111001000101000000000000011100011100000000000000 // 1a9 microcode\cmps.us:43 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel
0011010101100000000000000000000000110000011100000000001000000000 // 1aa microcode\cmps.us:46 ra_sel a_sel alu_op mar_wr_sel mar_write segment segment_force
0011010110011000000000000000000000000100011100000000001010000000 // 1ab microcode\cmps.us:48 segment segment_force mem_read a_sel alu_op tmp_wr_en ra_sel
0011010110100010111001000011000000000000011001111100000000000000 // 1ac microcode\cmps.us:50 a_sel b_sel immediate alu_op rd_sel_source rd_sel ra_sel
0011010111000000000000000000000000110000011000000000110000000000 // 1ad microcode\cmps.us:53 a_sel alu_op mar_wr_sel mar_write segment ra_sel
0011010111100010111001000011000000000000000001101100110000000000 // 1ae microcode\cmps.us:54 a_sel b_sel immediate alu_op rd_sel_source rd_sel segment
0011011000111000111011000000001000000100000000000000110000001100 // 1af microcode\cmps.us:56 segment mem_read a_sel b_sel alu_op update_flags jump_type jump_target
0011010100000001011000010000001100000000000010000000000000000000 // 1b0 microcode\cmps.us:58 rb_cl alu_op ext_int_yield jump_type jump_target
0011011001000000000000000000000000000001000000000000000000000000 // 1b1 microcode\cmps.us:61 next_instruction
0011011010000000000000000000000000001000000000000000000000000001 // 1b2 microcode\div.us:6 width a_sel alu_op mdr_write jump_type jump_target
0011011010000000000000000000000000000100000000000000110000000001 // 1b3 microcode\div.us:8 width segment mem_read jump_type jump_target
0011011010100000000000000000000000000000000000000000000000000000 // 1b4 microcode\div.us:10 ra_sel
0011011011000000000000000000000000000000000000000000000010000000 // 1b5 microcode\div.us:12 a_sel alu_op tmp_wr_en
0011011011100011110000000000000000000000000000000000000000000001 // 1b6 microcode\div.us:13 width alu_op
0011011100000000000000000000000000000000000000001101000000000001 // 1b7 microcode\div.us:15 width reg_wr_source rd_sel_source rd_sel
0011011100100000000000000000000000000001000001001110000000000001 // 1b8 microcode\div.us:16 width reg_wr_source rd_sel_source rd_sel next_instruction
0011011101100000000000000000000000001000000000000000000000000000 // 1b9 microcode\div.us:20 a_sel alu_op mdr_write ra_sel jump_type jump_target
0011011101100000000000000000000000000100000000000000110000000000 // 1ba microcode\div.us:22 segment mem_read ra_sel jump_type jump_target
0011011110000000000000000000000000000000001000000000000010000000 // 1bb microcode\div.us:25 a_sel alu_op tmp_wr_en ra_sel
0011011110100011110000000000000000000000001000000000000000000000 // 1bc microcode\div.us:26 ra_sel alu_op
0011011111000000000000000000000000000000000000001101000000000000 // 1bd microcode\div.us:28 reg_wr_source rd_sel_source rd_sel
0011011111100000000000000000000000000001000000101110000000000000 // 1be microcode\div.us:29 reg_wr_source rd_sel_source rd_sel next_instruction
0011100000100000000000000000000000001000000000000000000000000001 // 1bf microcode\div.us:33 width a_sel alu_op mdr_write jump_type jump_target
0011100000100000000000000000000000000100000000000000110000000001 // 1c0 microcode\div.us:35 width segment mem_read jump_type jump_target
0011100001000000000000000000000000000000000000000000000000000000 // 1c1 microcode\div.us:37 ra_sel
0011100001100000000000000000000000000000000000000000000010000000 // 1c2 microcode\div.us:39 a_sel alu_op tmp_wr_en
0011011011100011111000000000000000000000000000000000000000000001 // 1c3 microcode\div.us:40 width alu_op jump_type jump_target
0011100011000000000000000000000000001000000000000000000000000000 // 1c4 microcode\div.us:43 a_sel alu_op mdr_write ra_sel jump_type jump_target
0011100011000000000000000000000000000100000000000000110000000000 // 1c5 microcode\div.us:45 segment mem_read ra_sel jump_type jump_target
0011100011100000000000000000000000000000001000000000000010000000 // 1c6 microcode\div.us:48 a_sel alu_op tmp_wr_en ra_sel
0011011110100011111000000000000000000000001000000000000000000000 // 1c7 microcode\div.us:49 ra_sel alu_op jump_type jump_target
0011100100100000000000000000000000000000000000000000000000000001 // 1c8 microcode\div.us:55 width ra_sel
0011100101000000000000000000000000000000000000000000000010000000 // 1c9 microcode\div.us:57 a_sel alu_op tmp_wr_en
0011100101100011110000000000000000000000000000000000000000000001 // 1ca microcode\div.us:58 width alu_op
0011100110000000000000000000000000000000000001001101000000000001 // 1cb microcode\div.us:59 width reg_wr_source rd_sel_source rd_sel
0011100110100000000000000000000000000000000000001110000000000001 // 1cc microcode\div.us:60 width reg_wr_source rd_sel_source rd_sel
0011100111000000000000000000000000000000000000000000000000000000 // 1cd microcode\div.us:62 ra_sel
0011100111100000010001000001000000000001000000000000000000001000 // 1ce microcode\div.us:63 a_sel b_sel immediate alu_op update_flags next_instruction
0011101000000000111001000011000000110000010101001100000000000000 // 1cf microcode\enter.us:10 a_sel b_sel immediate alu_op mar_write mar_wr_sel ra_sel rd_sel_source rd_sel
0011101000100000000000000000000000001000000000000000101000000000 // 1d0 microcode\enter.us:12 a_sel alu_op mdr_write segment_force segment
0011110000000000000000000000010010000010010000000000101000000000 // 1d1 microcode\enter.us:13 segment_force segment mem_write ra_sel jump_type jump_target
0011101001100100011100000000000000110000010000000000000000000000 // 1d2 microcode\enter.us:17 a_sel b_sel alu_op mar_write mar_wr_sel ra_sel
0011101010000000000000000000000000001000000000000000101000000000 // 1d3 microcode\enter.us:19 a_sel alu_op mdr_write segment_force segment
0011101010100000000000000000000000000010000000000000101000000000 // 1d4 microcode\enter.us:20 segment_force segment mem_write
0011101101100000000000000000010010000000010100000000000000000000 // 1d5 microcode\enter.us:23 jump_type ra_sel jump_target
0011101011100000111001000011000000110000000001011100101000000000 // 1d6 microcode\enter.us:25 a_sel b_sel immediate alu_op rd_sel rd_sel_source segment_force segment mar_write mar_wr_sel
0011101100000000000000000000000000000100010000000000101000000000 // 1d7 microcode\enter.us:29 segment_force segment mem_read ra_sel
0011101100100000111001000011000000110000000001001100101000000000 // 1d8 microcode\enter.us:30 a_sel b_sel immediate alu_op rd_sel rd_sel_source segment_force segment mar_write mar_wr_sel
0011101101000000000000000000000000000010000000000000101000000000 // 1d9 microcode\enter.us:33 segment_force segment mem_write
0011101010100000000000000000000000000000000000000000000000000000 // 1da microcode\enter.us:34 jump_type jump_target
0011101110000000000000000000000000000000010000000000000000000000 // 1db microcode\enter.us:38 ra_sel
0011101110100000111001000011000000110000000001001100101000000000 // 1dc microcode\enter.us:39 a_sel b_sel immediate alu_op rd_sel rd_sel_source segment_force segment mar_write mar_wr_sel
0011101111000000000000000000000000000100010000000000101000000000 // 1dd microcode\enter.us:42 segment_force segment mem_read ra_sel
0011101111111000000000000000000000000000010001011100000000000000 // 1de microcode\enter.us:43 a_sel alu_op rd_sel rd_sel_source ra_sel
0011110000000000111011000000000000000001000001001100000000000000 // 1df microcode\enter.us:46 a_sel b_sel alu_op rd_sel rd_sel_source next_instruction
0011110000100000000000000000000000000000010001011100000000000000 // 1e0 microcode\enter.us:50 a_sel alu_op rd_sel rd_sel_source ra_sel
0011110001000000111011000000000000000001000001001100000000000000 // 1e1 microcode\enter.us:52 a_sel b_sel alu_op rd_sel rd_sel_source next_instruction
0010010110100000001001000110000000000000000000000000000010000000 // 1e2 microcode\esc.us:29 b_sel immediate alu_op tmp_wr_en jump_type jump_target
0011110010000100000001000000000000000001000001001100000000000001 // 1e3 microcode\extend.us:9 width a_sel b_sel alu_op rd_sel_source rd_sel next_instruction
0011110010100100000001000000000000000001000000101100000000000000 // 1e4 microcode\extend.us:17 a_sel b_sel alu_op rd_sel_source rd_sel next_instruction
0011110011000001101000000000000000000001000000000000000000011000 // 1e5 microcode\flags.us:48 a_sel alu_op update_flags next_instruction
0011110011100001001000000000000000000001000000001100000000000001 // 1e6 microcode\flags.us:55 width a_sel b_sel alu_op rd_sel_source rd_sel next_instruction
0011110011100000000000010000000000000000000000000000000000000000 // 1e7 microcode\hlt.us:9 jump_type ext_int_yield jump_target
0011111000000000000000000000000010000000100000000000110000000001 // 1e8 microcode\inc.us:9 width ra_modrm_rm_reg segment jump_type jump_target
0011111001100000000000000000000010000000100000000000110000000001 // 1e9 microcode\inc.us:10 width ra_modrm_rm_reg segment jump_type jump_target
0011110101100000000000000000000000000001000000000000000000000000 // 1ea microcode\inc.us:11 next_instruction
0011110110000000000000000000000000000001000000000000000000000000 // 1eb microcode\inc.us:12 next_instruction
0011110110100000000000000000000000000001000000000000000000000000 // 1ec microcode\inc.us:13 next_instruction
0011110111000000000000000000000000000001000000000000000000000000 // 1ed microcode\inc.us:14 next_instruction
0011110111100000000000000000000000000001000000000000000000000000 // 1ee microcode\inc.us:15 next_instruction
1000011101000000000000000000000000000000000000000000000000000000 // 1ef microcode\inc.us:16 jump_type jump_target
0011111000100000010001000101000000000001000000001000000000100110 // 1f0 microcode\inc.us:19 a_sel b_sel immediate alu_op rd_sel_source update_flags width next_instruction
0011111001000000000000000000000000000100000000000000110000000010 // 1f1 microcode\inc.us:23 width segment mem_read
1001001100111000010001000101000000001000000000000000110000100110 // 1f2 microcode\inc.us:24 a_sel b_sel immediate alu_op mdr_write update_flags width segment jump_type jump_target
0011111010000000111001000101000000000001000000001000000000100110 // 1f3 microcode\inc.us:29 a_sel b_sel immediate alu_op rd_sel_source update_flags width next_instruction
0011111010100000000000000000000000000100000000000000110000000010 // 1f4 microcode\inc.us:33 width segment mem_read
1001001100111000111001000101000000001000000000000000110000100110 // 1f5 microcode\inc.us:34 a_sel b_sel immediate alu_op mdr_write update_flags width segment jump_type jump_target
0011111011100000010001000101000000000001000000001100000000100100 // 1f6 microcode\inc.us:38 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0011111100000000010001000101000000000001000000011100000000100100 // 1f7 microcode\inc.us:39 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0011111100100000010001000101000000000001000000101100000000100100 // 1f8 microcode\inc.us:40 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0011111101000000010001000101000000000001000000111100000000100100 // 1f9 microcode\inc.us:41 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0011111101100000010001000101000000000001000001001100000000100100 // 1fa microcode\inc.us:42 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0011111110000000010001000101000000000001000001011100000000100100 // 1fb microcode\inc.us:43 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0011111110100000010001000101000000000001000001101100000000100100 // 1fc microcode\inc.us:44 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0011111111000000010001000101000000000001000001111100000000100100 // 1fd microcode\inc.us:45 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0011111111100000111001000101000000000001000000001100000000100100 // 1fe microcode\inc.us:47 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0100000000000000111001000101000000000001000000011100000000100100 // 1ff microcode\inc.us:48 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0100000000100000111001000101000000000001000000101100000000100100 // 200 microcode\inc.us:49 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0100000001000000111001000101000000000001000000111100000000100100 // 201 microcode\inc.us:50 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0100000001100000111001000101000000000001000001001100000000100100 // 202 microcode\inc.us:51 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0100000010000000111001000101000000000001000001011100000000100100 // 203 microcode\inc.us:52 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0100000010100000111001000101000000000001000001101100000000100100 // 204 microcode\inc.us:53 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0100000011000000111001000101000000000001000001111100000000100100 // 205 microcode\inc.us:54 a_sel b_sel immediate alu_op rd_sel_source rd_sel update_flags next_instruction
0100000011110000100001001001000000110000000000000000000000000000 // 206 microcode\int.us:13 a_sel b_sel immediate alu_op mar_write mar_wr_sel
0010010110110011100001001010000000000000000000000000000010000000 // 207 microcode\int.us:15 a_sel b_sel immediate alu_op tmp_wr_en jump_type jump_target
0100000101000000001001001011001110000000010000000000000010000000 // 208 microcode\int.us:23 b_sel immediate alu_op tmp_wr_en jump_type ra_sel jump_target
0100000101000000000000000000000000000001000000000000000000000000 // 209 microcode\int.us:25 next_instruction
0010010110100000000000000000000000000000000000000000000000000000 // 20a microcode\int.us:27 jump_type jump_target
0100000110000000111001000011000000110000000000000000101000000000 // 20b microcode\int.us:34 a_sel b_sel immediate alu_op mar_write mar_wr_sel segment segment_force
0100000110100000000000000000000000000010000000000000101000000000 // 20c microcode\int.us:36 segment segment_force mem_write
0100000111010000111001000011000000110000000000000000011000000000 // 20d microcode\int.us:37 a_sel b_sel immediate alu_op mar_write mar_wr_sel segment_force segment
0100000111100000001010000000000000001000000000000000101000000000 // 20e microcode\int.us:39 b_sel alu_op mdr_write segment segment_force
0100001000000000000000000000000000000010000000000000101000000000 // 20f microcode\int.us:40 segment segment_force mem_write
0100001000110000111001000011000000110000000000000000000000000000 // 210 microcode\int.us:41 a_sel b_sel immediate alu_op mar_write mar_wr_sel
0100001001001000000000000000000000001000000000000000101000000000 // 211 microcode\int.us:43 a_sel alu_op mdr_write segment segment_force
0100001001100000000000000000000000000010000000000000101000000000 // 212 microcode\int.us:44 segment segment_force mem_write
0100001010010000000000000000000000000000000001001100000000000000 // 213 microcode\int.us:45 a_sel alu_op rd_sel_source rd_sel
0100001010100001100001000001000000000000000000000000000000101000 // 214 microcode\int.us:47 b_sel immediate alu_op update_flags
0100001011000000001001000001000000000000000000000000011100000000 // 215 microcode\int.us:48 b_sel immediate alu_op segment_force segment segment_wr_en
0100001011100000001011000000000000110000000000000000011000000000 // 216 microcode\int.us:50 b_sel alu_op mar_wr_sel mar_write segment segment_force
0100001100000000000000000000000000000100000000000000011000000000 // 217 microcode\int.us:52 segment_force segment mem_read
0100001100111000000000000000000001000000000000000000000000000000 // 218 microcode\int.us:53 a_sel alu_op load_ip
0100001101010000010001000011000000110000000000000000011000000000 // 219 microcode\int.us:54 a_sel b_sel immediate alu_op mar_write mar_wr_sel segment segment_force
0100001101100000000000000000000000000100000000000000011000000000 // 21a microcode\int.us:56 segment_force segment mem_read
0100001110011000000000000000000000000001000000000000011100000000 // 21b microcode\int.us:57 a_sel alu_op segment_force segment segment_wr_en next_instruction
0100001110110000100001001001000000110000000000000000000000000000 // 21c microcode\io.us:13 a_sel b_sel immediate alu_op mar_write mar_wr_sel
0100001111000000000000000000000000001000000000000000000000000000 // 21d microcode\io.us:15 a_sel alu_op mdr_write
0100001111100000000000000000100000000011000000000000000000000010 // 21e microcode\io.us:16 width io mem_write next_instruction
0100010000000000000000000000000000001000001000000000000000000000 // 21f microcode\io.us:26 a_sel alu_op mdr_write ra_sel
0100010000100000000000000000000000110000000000000000000000000000 // 220 microcode\io.us:27 a_sel alu_op mar_write mar_wr_sel
0100010001000000000000000000100000000011000000000000000000000010 // 221 microcode\io.us:28 width io mem_write next_instruction
0100010001110000100001001001000000110000000000000000000000000000 // 222 microcode\io.us:38 a_sel b_sel immediate alu_op mar_write mar_wr_sel
0100010010000000000000000000100000000100000000000000000000000010 // 223 microcode\io.us:40 width io mem_read
0100010010111000000000000000000000000001000000001100000000000010 // 224 microcode\io.us:41 a_sel alu_op rd_sel_source rd_sel width next_instruction
0100010011000000000000000000000000110000000000000000000000000000 // 225 microcode\io.us:52 a_sel alu_op mar_write mar_wr_sel
0100010011100000000000000000100000000100000000000000000000000010 // 226 microcode\io.us:53 width io mem_read
0100010100011000000000000000000000000001000000001100000000000010 // 227 microcode\io.us:54 a_sel alu_op rd_sel_source rd_sel width next_instruction
0100010110000000000000000000001000000000011000000000000000000000 // 228 microcode\io.us:62 ra_sel jump_type jump_target
0100010101000000000000000000000000000000000010000000000000000000 // 229 microcode\io.us:63 rb_cl
0100011001100000111001000001010000000000000100000000000000000000 // 22a microcode\io.us:65 ra_sel a_sel b_sel immediate alu_op jump_type jump_target
0100010110000000111001000101000000000000011000011100000000000000 // 22b microcode\io.us:67 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel
0100010110100000000000000000000000110000011000000000110000000000 // 22c microcode\io.us:70 ra_sel a_sel alu_op mar_wr_sel mar_write segment
0100010111000010111001000101000000000000000001101100110000000000 // 22d microcode\io.us:71 a_sel b_sel immediate alu_op rd_sel_source rd_sel segment
0100010111100000000000000000000000000100000000000000110000000001 // 22e microcode\io.us:73 width segment mem_read
0100011000000000000000000000000000000000001000000000000000000000 // 22f microcode\io.us:74 ra_sel
0100011000100000000000000000000000110000000000000000000000000000 // 230 microcode\io.us:75 a_sel alu_op mar_write mar_wr_sel
0100011001100000000000000000101000000010000000000000000000000001 // 231 microcode\io.us:76 width io mem_write jump_type jump_target
0100010101000000000000010000000000000000000010000000000000000000 // 232 microcode\io.us:77 rb_cl ext_int_yield jump_type jump_target
0100011010000000000000000000000000000001000000000000000000000000 // 233 microcode\io.us:79 next_instruction
0100011100000000000000000000001000000000011000000000000000000000 // 234 microcode\io.us:86 ra_sel jump_type jump_target
0100011011000000000000000000000000000000000010000000000000000000 // 235 microcode\io.us:87 rb_cl
0100011111100000111001000001010000000000000100000000000000000000 // 236 microcode\io.us:89 ra_sel a_sel b_sel immediate alu_op jump_type jump_target
0100011100000000111001000101000000000000011000011100000000000000 // 237 microcode\io.us:91 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel
0100011100100000000000000000000000110000011000000000110000000000 // 238 microcode\io.us:94 ra_sel a_sel alu_op mar_wr_sel mar_write segment
0100011101000010111001000011000000000000000001101100110000000000 // 239 microcode\io.us:95 a_sel b_sel immediate alu_op rd_sel_source rd_sel segment
0100011101100000000000000000000000000100000000000000110000000000 // 23a microcode\io.us:97 segment mem_read
0100011110000000000000000000000000000000001000000000000000000000 // 23b microcode\io.us:98 ra_sel
0100011110100000000000000000000000110000000000000000000000000000 // 23c microcode\io.us:99 a_sel alu_op mar_write mar_wr_sel
0100011111100000000000000000101000000010000000000000000000000000 // 23d microcode\io.us:100 io mem_write jump_type jump_target
0100011011000000000000010000000000000000000010000000000000000000 // 23e microcode\io.us:101 rb_cl ext_int_yield jump_type jump_target
0100100000000000000000000000000000000001000000000000000000000000 // 23f microcode\io.us:103 next_instruction
0100100010000000000000000000001000000000001000000000000000000000 // 240 microcode\io.us:110 ra_sel jump_type jump_target
0100100001000000000000000000000000000000000010000000000000000000 // 241 microcode\io.us:111 rb_cl
0100100110000000111001000001010000000000000100000000000000000000 // 242 microcode\io.us:113 ra_sel a_sel b_sel immediate alu_op jump_type jump_target
0100100010000000111001000101000000000000001000011100000000000000 // 243 microcode\io.us:115 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel
0100100010100000000000000000000000110000000000000000000000000000 // 244 microcode\io.us:118 a_sel alu_op mar_wr_sel mar_write
0100100011000000000000000000100000000100000000000000000000000001 // 245 microcode\io.us:119 width io mem_read
0100100011100000000000000000000000000000011100000000000000000000 // 246 microcode\io.us:120 ra_sel
0100100100000000000000000000000000110000000000000000001000000000 // 247 microcode\io.us:121 a_sel alu_op mar_write mar_wr_sel segment segment_force
0100100100100000000000000000000000000010000000000000001000000001 // 248 microcode\io.us:122 segment segment_force width mem_write
0100100101000000000000000000000000000000011100000000000000000000 // 249 microcode\io.us:123 ra_sel
0100100110000010111001000101001000000000000001111100000000000000 // 24a microcode\io.us:124 a_sel b_sel immediate alu_op rd_sel_source rd_sel jump_type jump_target
0100100001000000000000010000000000000000000010000000000000000000 // 24b microcode\io.us:127 rb_cl ext_int_yield jump_type jump_target
0100100110100000000000000000000000000001000000000000000000000000 // 24c microcode\io.us:129 next_instruction
0100101000100000000000000000001000000000001000000000000000000000 // 24d microcode\io.us:136 ra_sel jump_type jump_target
0100100111100000000000000000000000000000000010000000000000000000 // 24e microcode\io.us:137 rb_cl
0100101100100000111001000001010000000000000100000000000000000000 // 24f microcode\io.us:139 ra_sel a_sel b_sel immediate alu_op jump_type jump_target
0100101000100000111001000101000000000000001000011100000000000000 // 250 microcode\io.us:141 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel
0100101001000000000000000000000000110000000000000000000000000000 // 251 microcode\io.us:144 a_sel alu_op mar_wr_sel mar_write
0100101001100000000000000000100000000100000000000000000000000000 // 252 microcode\io.us:145 io mem_read
0100101010000000000000000000000000000000011100000000000000000000 // 253 microcode\io.us:146 ra_sel
0100101010100000000000000000000000110000000000000000001000000000 // 254 microcode\io.us:147 a_sel alu_op mar_write mar_wr_sel segment segment_force
0100101011000000000000000000000000000010000000000000001000000000 // 255 microcode\io.us:148 segment segment_force mem_write
0100101011100000000000000000000000000000011100000000000000000000 // 256 microcode\io.us:149 ra_sel
0100101100100010111001000011001000000000000001111100000000000000 // 257 microcode\io.us:150 a_sel b_sel immediate alu_op rd_sel_source rd_sel jump_type jump_target
0100100111100000000000010000000000000000000010000000000000000000 // 258 microcode\io.us:153 rb_cl ext_int_yield jump_type jump_target
0100101101000000000000000000000000000001000000000000000000000000 // 259 microcode\io.us:155 next_instruction
0100101101100000001100000000000000000001000000000000011100000000 // 25a microcode\jmp.us:13 b_sel alu_op segment_wr_en segment_force segment next_instruction
0100101110000000000000000000000001000001000000000000000000000000 // 25b microcode\jmp.us:21 a_sel alu_op load_ip next_instruction
0100101110100000000000000000000000000100000000000000110000000000 // 25c microcode\jmp.us:24 segment mem_read
0100101111011000000000000000000001000001000000000000000000000000 // 25d microcode\jmp.us:25 a_sel alu_op load_ip next_instruction
0100101111100000000000000000000000000001000000000000000000000000 // 25e microcode\jmp.us:29 next_instruction
0100110000000000000000000000000000000100000000000000110000000000 // 25f microcode\jmp.us:31 segment mem_read
0100110000111000000000000000000001000000000000000000000000000000 // 260 microcode\jmp.us:32 a_sel alu_op load_ip
0100110001010000010001000011000000110000000000000000110000000000 // 261 microcode\jmp.us:33 immediate a_sel b_sel alu_op mar_wr_sel mar_write segment
0100110001100000000000000000000000000100000000000000110000000000 // 262 microcode\jmp.us:35 segment mem_read
0100110010011000000000000000000000000001000000000000011100000000 // 263 microcode\jmp.us:36 a_sel alu_op segment_wr_en segment_force segment next_instruction
0100110011000000000000000000010000000000000000000000000000000000 // 264 microcode\jmp.us:45 jump_type jump_target
0100110011000000000000000000000000000001000000000000000000000000 // 265 microcode\jmp.us:46 next_instruction
0100110011101000010001000000000001000001000000000000000000000000 // 266 microcode\jmp.us:48 a_sel b_sel alu_op load_ip next_instruction
0100110100100000000000000000001110000000000000000000000000000000 // 267 microcode\jmp.us:73 jump_type jump_target
0100110100100000000000000000000000000001000000000000000000000000 // 268 microcode\jmp.us:74 next_instruction
0100110101001000010001000000000001000001000000000000000000000000 // 269 microcode\jmp.us:76 a_sel b_sel alu_op load_ip next_instruction
0100110101100000000000000000000000000001000000000000000000000000 // 26a microcode\lds.us:10 next_instruction
0100110110000000000000000000000000000100000000000000110000000000 // 26b microcode\lds.us:12 segment mem_read
0100110110111000000000000000000000000000000000000100110000000000 // 26c microcode\lds.us:13 rd_sel_source a_sel alu_op segment
0100110111010000010001000011000000110000000000000000110000000000 // 26d microcode\lds.us:15 a_sel alu_op b_sel immediate mar_write mar_wr_sel segment
0100110111100000000000000000000000000100000000000000110000000000 // 26e microcode\lds.us:17 segment mem_read
0100111000011000000000000000000000000001000000000000111100000000 // 26f microcode\lds.us:18 segment_force segment segment_wr_en a_sel alu_op next_instruction
0100111000100000000000000000000000000001000000000000000000000000 // 270 microcode\lea.us:9 next_instruction
0100111001010000000000000000000000000001000000000100000000000000 // 271 microcode\lea.us:11 rd_sel rd_sel_source a_sel alu_op next_instruction
0100111001100000000000000000000000110000000001001100101000000000 // 272 microcode\leave.us:9 a_sel alu_op rd_sel rd_sel_source mar_write mar_wr_sel segment segment_force
0100111010000000000000000000000000000100000000000000101000000000 // 273 microcode\leave.us:11 segment segment_force mem_read
0100111010111000000000000000000000000000000001011100000000000000 // 274 microcode\leave.us:12 a_sel alu_op rd_sel rd_sel_source
0100111011010000010001000011000000000001000001001100000000000000 // 275 microcode\leave.us:13 a_sel b_sel immediate alu_op rd_sel_source rd_sel next_instruction
0100111011100000000000000000000000000001000000000000000000000000 // 276 microcode\les.us:10 next_instruction
0100111100000000000000000000000000000100000000000000110000000000 // 277 microcode\les.us:12 segment mem_read
0100111100111000000000000000000000000000000000000100110000000000 // 278 microcode\les.us:13 rd_sel_source a_sel alu_op segment
0100111101010000010001000011000000110000000000000000110000000000 // 279 microcode\les.us:15 a_sel alu_op b_sel immediate mar_write mar_wr_sel segment
0100111101100000000000000000000000000100000000000000110000000000 // 27a microcode\les.us:17 segment mem_read
0100111110011000000000000000000000000001000000000000001100000000 // 27b microcode\les.us:18 segment_force segment segment_wr_en a_sel alu_op next_instruction
0100111111100000000000000000001000000000011010000000000000000000 // 27c microcode\lods.us:10 ra_sel rb_cl jump_type jump_target
0101000001100000000000000000010000000000000100000000000000000000 // 27d microcode\lods.us:12 ra_sel jump_type jump_target
0100111111100000111001000101000000000000011000011100000000000000 // 27e microcode\lods.us:13 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel
0101000000000000000000000000000000110000011000000000110000000000 // 27f microcode\lods.us:16 ra_sel a_sel alu_op mar_wr_sel mar_write segment
0101000000100010111001000101000000000000000001101100110000000000 // 280 microcode\lods.us:17 a_sel b_sel immediate alu_op rd_sel_source rd_sel segment
0101000001111000000000000000001000000100000000001100110000000001 // 281 microcode\lods.us:19 width segment mem_read a_sel alu_op rd_sel_source rd_sel jump_type jump_target
0100111110100000000000010000000000000000000010000000000000000000 // 282 microcode\lods.us:21 rb_cl ext_int_yield jump_type jump_target
0101000010000000000000000000000000000001000000000000000000000000 // 283 microcode\lods.us:23 next_instruction
0101000011100000000000000000001000000000011010000000000000000000 // 284 microcode\lods.us:30 ra_sel rb_cl jump_type jump_target
0101000101100000000000000000010000000000000100000000000000000000 // 285 microcode\lods.us:32 ra_sel jump_type jump_target
0101000011100000111001000101000000000000011000011100000000000000 // 286 microcode\lods.us:33 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel
0101000100000000000000000000000000110000011000000000110000000000 // 287 microcode\lods.us:36 ra_sel a_sel alu_op mar_wr_sel mar_write segment
0101000100100010111001000011000000000000000001101100110000000000 // 288 microcode\lods.us:37 a_sel b_sel immediate alu_op rd_sel_source rd_sel segment
0101000101111000000000000000001000000100000000001100110000000000 // 289 microcode\lods.us:39 segment mem_read a_sel alu_op rd_sel_source rd_sel jump_type jump_target
0101000010100000000000010000000000000000000010000000000000000000 // 28a microcode\lods.us:41 rb_cl ext_int_yield jump_type jump_target
0101000110000000000000000000000000000001000000000000000000000000 // 28b microcode\lods.us:43 next_instruction
0101000110100000111001000101000000000000000010011100000000000000 // 28c microcode\loop.us:10 a_sel b_sel immediate alu_op rd_sel_source rd_sel rb_cl
0101000111100000000000000000010000000000000000000000000000000000 // 28d microcode\loop.us:13 jump_type jump_target
0101000111101000010001000000000001000001000000000000000000000000 // 28e microcode\loop.us:14 a_sel b_sel alu_op load_ip next_instruction
0101001000000000000000000000000000000001000000000000000000000000 // 28f microcode\loop.us:16 next_instruction
0101001001000000111001000101001010000000000010011100000000000000 // 290 microcode\loop.us:24 a_sel b_sel immediate alu_op rd_sel_source rd_sel rb_cl jump_type jump_target
0101000111100000000000000000000000000000000000000000000000000000 // 291 microcode\loop.us:27 jump_type jump_target
0101000111100000000000000000010000000000000000000000000000000000 // 292 microcode\loop.us:29 jump_type jump_target
0101001010001000010001000000000001000001000000000000000000000000 // 293 microcode\loop.us:30 a_sel b_sel alu_op load_ip next_instruction
0101000111100000111001000101001010000000000010011100000000000000 // 294 microcode\loop.us:38 a_sel b_sel immediate alu_op rd_sel_source rd_sel rb_cl jump_type jump_target
0101000111100000000000000000010000000000000000000000000000000000 // 295 microcode\loop.us:41 jump_type jump_target
0101001011101000010001000000000001000001000000000000000000000000 // 296 microcode\loop.us:43 a_sel b_sel alu_op load_ip next_instruction
0101001100000000001000000000000000000001000000001000000000000010 // 297 microcode\mov.us:12 b_sel alu_op rd_sel_source width next_instruction
1001001100100000001000000000000000001000000000000000110000000000 // 298 microcode\mov.us:15 b_sel alu_op mdr_write segment jump_type jump_target
0101001101000000000000000000000000000001100000000100000000000010 // 299 microcode\mov.us:27 a_sel ra_modrm_rm_reg alu_op rd_sel_source width next_instruction
0101001101100000000000000000000000000100000000000000110000000010 // 29a microcode\mov.us:31 mem_read width segment
0101001110011000000000000000000000000001000000000100000000000010 // 29b microcode\mov.us:32 rd_sel_source a_sel alu_op width next_instruction
0101010010000000000000000000000010000000000000000000000000000000 // 29c microcode\mov.us:43 jump_type jump_target
0101001111000000000000000000000000000001000000000000000000000000 // 29d microcode\mov.us:44 next_instruction
0101001111100000000000000000000000000001000000000000000000000000 // 29e microcode\mov.us:45 next_instruction
0101010000000000000000000000000000000001000000000000000000000000 // 29f microcode\mov.us:46 next_instruction
0101010000100000000000000000000000000001000000000000000000000000 // 2a0 microcode\mov.us:47 next_instruction
0101010001000000000000000000000000000001000000000000000000000000 // 2a1 microcode\mov.us:48 next_instruction
0101010001100000000000000000000000000001000000000000000000000000 // 2a2 microcode\mov.us:49 next_instruction
0101010010000000000000000000000000000001000000000000000000000000 // 2a3 microcode\mov.us:50 next_instruction
0101010010100000001001000000000000000001000000001000000000000010 // 2a4 microcode\mov.us:52 b_sel alu_op rd_sel_source width next_instruction
1001001100100000001001000000000000001000000000000000110000000000 // 2a5 microcode\mov.us:56 b_sel alu_op mdr_write segment jump_type jump_target
0101010011100000000000000000000000000100000000000000110000000010 // 2a6 microcode\mov.us:94 segment width mem_read
0101010100011000000000000000000000000001000000001100000000000010 // 2a7 microcode\mov.us:95 rd_sel_source rd_sel width a_sel alu_op next_instruction
1001001100100000000000000000000000001000000000000000110000000000 // 2a8 microcode\mov.us:105 a_sel alu_op mdr_write segment jump_type jump_target
0101010101000000000000100000000000000001000000000100000100000000 // 2a9 microcode\mov.us:113 segment_wr_en rd_sel_source a_sel alu_op ext_int_inhibit next_instruction
0101010101100000000000000000000000000100000000000000110000000000 // 2aa microcode\mov.us:116 segment mem_read
0101010110011000000000100000000000000001000000000100000100000000 // 2ab microcode\mov.us:117 rd_sel_source segment_wr_en a_sel alu_op ext_int_inhibit next_instruction
0101011010000000000000000000000010000000000000000000001000000000 // 2ac microcode\mov.us:125 segment_force segment jump_type jump_target
0101011010000000000000000000000010000000000000000000011000000000 // 2ad microcode\mov.us:126 segment_force segment jump_type jump_target
0101011010000000000000000000000010000000000000000000101000000000 // 2ae microcode\mov.us:127 segment_force segment jump_type jump_target
0101011010000000000000000000000010000000000000000000111000000000 // 2af microcode\mov.us:128 segment_force segment jump_type jump_target
0101011010000000000000000000000010000000000000000000001000000000 // 2b0 microcode\mov.us:129 segment_force segment jump_type jump_target
0101011010000000000000000000000010000000000000000000011000000000 // 2b1 microcode\mov.us:130 segment_force segment jump_type jump_target
0101011010000000000000000000000010000000000000000000101000000000 // 2b2 microcode\mov.us:131 segment_force segment jump_type jump_target
0101011010000000000000000000000010000000000000000000111000000000 // 2b3 microcode\mov.us:132 segment_force segment jump_type jump_target
0101011010100000001010000000000000000001000000001000000000000000 // 2b4 microcode\mov.us:134 rd_sel_source b_sel alu_op next_instruction
1001001100000000001010000000000000001000000000000000110000000000 // 2b5 microcode\mov.us:137 b_sel alu_op mdr_write segment jump_type jump_target
0101011100100000000000000000001000000000011010000000000000000000 // 2b6 microcode\movs.us:10 ra_sel rb_cl jump_type jump_target
0101011111100000000000000000010000000000000100000000000000000000 // 2b7 microcode\movs.us:12 ra_sel jump_type jump_target
0101011100100000111001000101000000000000011000011100000000000000 // 2b8 microcode\movs.us:13 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel
0101011101000000000000000000000000110000011000000000110000000000 // 2b9 microcode\movs.us:16 a_sel alu_op mar_wr_sel mar_write ra_sel segment
0101011101100000000000000000000000000100000000000000110000000001 // 2ba microcode\movs.us:17 width segment mem_read
0101011110010010111001000101000000000000011101101100000000000000 // 2bb microcode\movs.us:19 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel
0101011110100000000000000000000000110000011100000000001000000000 // 2bc microcode\movs.us:21 ra_sel a_sel alu_op mar_wr_sel mar_write segment segment_force
0101100000000000000000000000001000000010000000000000001000000001 // 2bd microcode\movs.us:23 width segment segment_force mem_write jump_type jump_target
0101011011110010111001010101000000000000000011111100000000000000 // 2be microcode\movs.us:25 a_sel b_sel immediate alu_op rd_sel_source rd_sel rb_cl ext_int_yield jump_type jump_target
0101100000000000000000000000000000000001000000000000000000000000 // 2bf microcode\movs.us:29 next_instruction
0101100000110010111001000101000000000001000001111100000000000000 // 2c0 microcode\movs.us:31 a_sel b_sel immediate alu_op rd_sel_source rd_sel next_instruction
0101100010000000000000000000001000000000011010000000000000000000 // 2c1 microcode\movs.us:39 ra_sel rb_cl jump_type jump_target
0101100101000000000000000000010000000000000100000000000000000000 // 2c2 microcode\movs.us:41 ra_sel jump_type jump_target
0101100010000000111001000101000000000000011000011100000000000000 // 2c3 microcode\movs.us:42 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel
0101100010100000000000000000000000110000011000000000000000000000 // 2c4 microcode\movs.us:45 a_sel alu_op mar_wr_sel mar_write ra_sel
0101100011000010111001000011000000000000000001101100110000000000 // 2c5 microcode\movs.us:46 a_sel b_sel immediate alu_op rd_sel_source rd_sel segment
0101100011100000000000000000000000110100011100000000110000000000 // 2c6 microcode\movs.us:49 segment mem_read ra_sel a_sel alu_op mar_wr_sel mar_write
0101100100000010111001000011000000000000000001111100001000000000 // 2c7 microcode\movs.us:51 a_sel b_sel immediate alu_op rd_sel_source rd_sel segment segment_force
0101100101000000000000000000001000000010000000000000001000000000 // 2c8 microcode\movs.us:54 segment segment_force mem_write jump_type jump_target
0101100001000000000000010000000000000000000010000000000000000000 // 2c9 microcode\movs.us:56 rb_cl ext_int_yield jump_type jump_target
0101100101100000000000000000000000000001000000000000000000000000 // 2ca microcode\movs.us:58 next_instruction
0101100110100000000000000000000000001000000000000000000000000001 // 2cb microcode\mul.us:6 width a_sel alu_op mdr_write ra_sel jump_type jump_target
0101100110100000000000000000000000000100000000000000110000000001 // 2cc microcode\mul.us:8 width segment mem_read ra_sel jump_type jump_target
0101100111000000000000000000000000000000000000000000000010000001 // 2cd microcode\mul.us:10 width a_sel alu_op tmp_wr_en
0101100111111011100011000000000000000000000000000000000010101101 // 2ce microcode\mul.us:13 width a_sel b_sel alu_op update_flags tmp_wr_en
0101101000000000001011000000000000000001000000001100000000000000 // 2cf microcode\mul.us:15 b_sel alu_op rd_sel_source rd_sel next_instruction
0101101001000000000000000000000000001000000000000000000000000000 // 2d0 microcode\mul.us:20 a_sel alu_op mdr_write ra_sel jump_type jump_target
0101101001000000000000000000000000000100000000000000110000000000 // 2d1 microcode\mul.us:22 segment mem_read ra_sel jump_type jump_target
0101101001100000000000000000000000000000000000000000000010000000 // 2d2 microcode\mul.us:24 a_sel alu_op tmp_wr_en
0101101010011011100011000000000000000000000000001100000011101100 // 2d3 microcode\mul.us:25 a_sel b_sel alu_op update_flags tmp_wr_sel tmp_wr_en rd_sel_source rd_sel
0101101010100000001011000000000000000001000000101100000000000000 // 2d4 microcode\mul.us:28 b_sel alu_op rd_sel_source rd_sel next_instruction
0101101011100000000000000000000000001000000000000000000000000001 // 2d5 microcode\mul.us:33 width a_sel alu_op mdr_write ra_sel jump_type jump_target
0101101011100000000000000000000000000100000000000000110000000001 // 2d6 microcode\mul.us:35 width segment mem_read ra_sel jump_type jump_target
0101101100000000000000000000000000000000000000000000000010000001 // 2d7 microcode\mul.us:37 width a_sel alu_op tmp_wr_en
0101101100111011101011000000000000000000000000000000000010101101 // 2d8 microcode\mul.us:40 width a_sel b_sel alu_op update_flags tmp_wr_en
0101101101000000001011000000000000000001000000001100000000000000 // 2d9 microcode\mul.us:42 b_sel alu_op rd_sel_source rd_sel next_instruction
0101101110000000000000000000000000001000000000000000000000000000 // 2da microcode\mul.us:47 a_sel alu_op mdr_write ra_sel jump_type jump_target
0101101110000000000000000000000000000100000000000000110000000000 // 2db microcode\mul.us:49 segment mem_read ra_sel jump_type jump_target
0101101110100000000000000000000000000000000000000000000010000000 // 2dc microcode\mul.us:51 a_sel alu_op tmp_wr_en
0101101111011011101011000000000000000000000000001100000011101100 // 2dd microcode\mul.us:52 a_sel b_sel alu_op update_flags tmp_wr_sel tmp_wr_en rd_sel_source rd_sel
0101101111100000001011000000000000000001000000101100000000000000 // 2de microcode\mul.us:55 b_sel alu_op rd_sel_source rd_sel next_instruction
0101110000000011101001000000000000000001000000000100000000101100 // 2df microcode\mul.us:62 a_sel b_sel alu_op update_flags rd_sel_source next_instruction
0101110000100000000000000000000000000100000000000000110000000000 // 2e0 microcode\mul.us:65 segment mem_read
0101110001011011101001000000000000000001000000000100000000101100 // 2e1 microcode\mul.us:66 a_sel b_sel alu_op update_flags rd_sel_source next_instruction
0101110001100001000001000001000000000001000000001000000000001110 // 2e2 microcode\neg.us:6 a_sel b_sel immediate alu_op rd_sel_source update_flags width next_instruction
0101110010000000000000000000000000000100100000000000110000000010 // 2e3 microcode\neg.us:10 width segment mem_read ra_modrm_rm_reg
1001001100111001000001000001000000001000000000000000110000001110 // 2e4 microcode\neg.us:11 a_sel b_sel immediate alu_op mdr_write update_flags width segment jump_type jump_target
0101110011000010110001000001000000000001000000001000000000001110 // 2e5 microcode\not.us:6 a_sel b_sel immediate alu_op rd_sel_source update_flags width next_instruction
0101110011100000000000000000000000000100100000000000110000000010 // 2e6 microcode\not.us:10 width segment mem_read ra_modrm_rm_reg
1001001100111010110001000001000000001000000000000000110000001110 // 2e7 microcode\not.us:11 a_sel b_sel immediate alu_op mdr_write update_flags width segment jump_type jump_target
0101110100100000110000000000000000000001000000001000000000010010 // 2e8 microcode\or.us:8 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0101110101000000000000000000000000000100000000000000110000000010 // 2e9 microcode\or.us:8 segment mem_read width
1001001100111000110000000000000000001000000000000000110000010010 // 2ea microcode\or.us:8 a_sel b_sel alu_op mdr_write update_flags width segment jump_type jump_target
0101110110000000110000000000000000000001000000000100000000010010 // 2eb microcode\or.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0101110110100000000000000000000000000100000000000000110000000010 // 2ec microcode\or.us:9 segment mem_read width
0101110111011000110000000000000000000001000000000100000000010010 // 2ed microcode\or.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0101110111100000110001000000000000000001000000001100000000010010 // 2ee microcode\or.us:10 a_sel b_sel alu_op rd_sel_source rd_sel update_flags width next_instruction
0101111000000000110001000000000000000001000000001000000000010010 // 2ef microcode\or.us:11 a_sel b_sel alu_op rd_sel_source width update_flags next_instruction
0101111000100000000000000000000000000100000000000000110000000010 // 2f0 microcode\or.us:11 segment mem_read width
1001001100111000110001000000000000001000000000000000110000010010 // 2f1 microcode\or.us:11 a_sel b_sel alu_op mdr_write update_flags segment width jump_type jump_target
0101111010000000000000000000000000000000100000000000000000000000 // 2f2 microcode\or.us:12 ra_modrm_rm_reg jump_type jump_target
0101111010100000000000000000000000000000100000000000110000000000 // 2f3 microcode\or.us:12 ra_modrm_rm_reg segment jump_type jump_target
0101111010100000110001000000000000000001000000001000000000010000 // 2f4 microcode\or.us:12 a_sel b_sel alu_op rd_sel_source update_flags next_instruction
0101111011000000000000000000000000000100000000000000110000000000 // 2f5 microcode\or.us:12 segment mem_read
1001001100011000110001000000000000001000000000000000110000010000 // 2f6 microcode\or.us:12 a_sel b_sel alu_op mdr_write update_flags segment jump_type jump_target
0101111100100000000000000000000000110000000000000000101000000000 // 2f7 microcode\pop.us:6 a_sel alu_op mar_wr_sel mar_write segment_force segment jump_type jump_target
0101111110000000000000000000000000110000000000000000101000000000 // 2f8 microcode\pop.us:9 a_sel alu_op mar_wr_sel mar_write segment_force segment jump_type jump_target
0101111101000000000000000000000000000100010000000000101000000000 // 2f9 microcode\pop.us:12 segment_force segment mem_read ra_sel
0101111101100000010001000011000000000000000001001100000000000000 // 2fa microcode\pop.us:13 a_sel b_sel immediate alu_op rd_sel rd_sel_source
0101111110011000000000000000000000000001000000001000000000000000 // 2fb microcode\pop.us:15 a_sel alu_op rd_sel_source next_instruction
0101111110100000000000000000000000000100010000000000101000000000 // 2fc microcode\pop.us:18 segment_force segment mem_read ra_sel
0101111111000000010001000011000000000000000001001100000000000000 // 2fd microcode\pop.us:19 a_sel b_sel immediate alu_op rd_sel rd_sel_source
1001001100000000000000000000000000010000000000000000110000000000 // 2fe microcode\pop.us:21 mar_write mar_wr_sel segment jump_type jump_target
0110000000000000000000000000000000110000000000000000101000000000 // 2ff microcode\pop.us:23 a_sel alu_op mar_wr_sel mar_write segment_force segment
0110000000110000010001000011000000000100000001001100101000000000 // 300 microcode\pop.us:23 segment_force segment mem_read a_sel b_sel immediate alu_op rd_sel rd_sel_source
0110000001011000000000100000000000000001000000000000001100000000 // 301 microcode\pop.us:23 a_sel alu_op segment_force segment segment_wr_en ext_int_inhibit next_instruction
0110000001100000000000000000000000110000000000000000101000000000 // 302 microcode\pop.us:24 a_sel alu_op mar_wr_sel mar_write segment_force segment
0110000010010000010001000011000000000100000001001100101000000000 // 303 microcode\pop.us:24 segment_force segment mem_read a_sel b_sel immediate alu_op rd_sel rd_sel_source
0110000010111000000000100000000000000001000000000000101100000000 // 304 microcode\pop.us:24 a_sel alu_op segment_force segment segment_wr_en ext_int_inhibit next_instruction
0110000011000000000000000000000000110000000000000000101000000000 // 305 microcode\pop.us:25 a_sel alu_op mar_wr_sel mar_write segment_force segment
0110000011110000010001000011000000000100000001001100101000000000 // 306 microcode\pop.us:25 segment_force segment mem_read a_sel b_sel immediate alu_op rd_sel rd_sel_source
0110000100011000000000100000000000000001000000000000111100000000 // 307 microcode\pop.us:25 a_sel alu_op segment_force segment segment_wr_en ext_int_inhibit next_instruction
0110000100100000000000000000000000110000000000000000101000000000 // 308 microcode\pop.us:27 a_sel alu_op mar_wr_sel mar_write segment_force segment
0110000101010000010001000011000000000100000001001100101000000000 // 309 microcode\pop.us:27 segment_force segment mem_read a_sel b_sel immediate alu_op rd_sel rd_sel_source
0110000101111000000000000000000000000001000000001100000000000000 // 30a microcode\pop.us:27 a_sel alu_op rd_sel rd_sel_source next_instruction
0110000110000000000000000000000000110000000000000000101000000000 // 30b microcode\pop.us:28 a_sel alu_op mar_wr_sel mar_write segment_force segment
0110000110110000010001000011000000000100000001001100101000000000 // 30c microcode\pop.us:28 segment_force segment mem_read a_sel b_sel immediate alu_op rd_sel rd_sel_source
0110000111011000000000000000000000000001000000011100000000000000 // 30d microcode\pop.us:28 a_sel alu_op rd_sel rd_sel_source next_instruction
0110000111100000000000000000000000110000000000000000101000000000 // 30e microcode\pop.us:29 a_sel alu_op mar_wr_sel mar_write segment_force segment
0110001000010000010001000011000000000100000001001100101000000000 // 30f microcode\pop.us:29 segment_force segment mem_read a_sel b_sel immediate alu_op rd_sel rd_sel_source
0110001000111000000000000000000000000001000000101100000000000000 // 310 microcode\pop.us:29 a_sel alu_op rd_sel rd_sel_source next_instruction
0110001001000000000000000000000000110000000000000000101000000000 // 311 microcode\pop.us:30 a_sel alu_op mar_wr_sel mar_write segment_force segment
0110001001110000010001000011000000000100000001001100101000000000 // 312 microcode\pop.us:30 segment_force segment mem_read a_sel b_sel immediate alu_op rd_sel rd_sel_source
0110001010011000000000000000000000000001000000111100000000000000 // 313 microcode\pop.us:30 a_sel alu_op rd_sel rd_sel_source next_instruction
0110001010100000000000000000000000110000000000000000101000000000 // 314 microcode\pop.us:31 a_sel alu_op mar_wr_sel mar_write segment_force segment
0110001011010000010001000011000000000100000001001100101000000000 // 315 microcode\pop.us:31 segment_force segment mem_read a_sel b_sel immediate alu_op rd_sel rd_sel_source
0110001011111000000000000000000000000001000001001100000000000000 // 316 microcode\pop.us:31 a_sel alu_op rd_sel rd_sel_source next_instruction
0110001100000000000000000000000000110000000000000000101000000000 // 317 microcode\pop.us:32 a_sel alu_op mar_wr_sel mar_write segment_force segment
0110001100110000010001000011000000000100000001001100101000000000 // 318 microcode\pop.us:32 segment_force segment mem_read a_sel b_sel immediate alu_op rd_sel rd_sel_source
0110001101011000000000000000000000000001000001011100000000000000 // 319 microcode\pop.us:32 a_sel alu_op rd_sel rd_sel_source next_instruction
0110001101100000000000000000000000110000000000000000101000000000 // 31a microcode\pop.us:33 a_sel alu_op mar_wr_sel mar_write segment_force segment
0110001110010000010001000011000000000100000001001100101000000000 // 31b microcode\pop.us:33 segment_force segment mem_read a_sel b_sel immediate alu_op rd_sel rd_sel_source
0110001110111000000000000000000000000001000001101100000000000000 // 31c microcode\pop.us:33 a_sel alu_op rd_sel rd_sel_source next_instruction
0110001111000000000000000000000000110000000000000000101000000000 // 31d microcode\pop.us:34 a_sel alu_op mar_wr_sel mar_write segment_force segment
0110001111110000010001000011000000000100000001001100101000000000 // 31e microcode\pop.us:34 segment_force segment mem_read a_sel b_sel immediate alu_op rd_sel rd_sel_source
0110010000011000000000000000000000000001000001111100000000000000 // 31f microcode\pop.us:34 a_sel alu_op rd_sel rd_sel_source next_instruction
0110010000100000000000000000000000110000000000000000101000000000 // 320 microcode\pop.us:41 alu_op mar_wr_sel mar_write segment_force segment
0110010001010000010001000011000000000100000001001100101000000000 // 321 microcode\pop.us:42 segment_force segment mem_read a_sel b_sel immediate alu_op rd_sel rd_sel_source
0110010001111001101000100000000000000001000000000000000000110000 // 322 microcode\pop.us:45 a_sel alu_op update_flags ext_int_inhibit next_instruction
0110010010100000111001000011000000110000100001001100110000000000 // 323 microcode\push.us:6 a_sel b_sel immediate alu_op rd_sel rd_sel_source mar_write mar_wr_sel jump_type ra_modrm_rm_reg segment jump_target
0110010011100000000000000000000000000100010000000000110000000000 // 324 microcode\push.us:10 segment mem_read jump_type ra_sel jump_target
0110010011000000000000000000000000001000000000000000101000000000 // 325 microcode\push.us:12 a_sel alu_op mdr_write segment_force segment
0110010011110000000000000000000000000011000000000000101000000000 // 326 microcode\push.us:13 segment_force segment mem_write a_sel next_instruction
0110010100000000111001000011000000110000000001001100101000000000 // 327 microcode\push.us:15 a_sel b_sel immediate alu_op rd_sel rd_sel_source mar_write mar_wr_sel segment_force segment
0110010100110000000000000000000000000011000000000000101000000000 // 328 microcode\push.us:18 segment_force segment mem_write a_sel alu_op next_instruction
0110010101000000000000000000000000001000010000000000000000000000 // 329 microcode\push.us:36 a_sel alu_op mdr_write ra_sel
0110010101100000111001000011000000110000000001000000101000000000 // 32a microcode\push.us:37 a_sel b_sel immediate alu_op rd_sel mar_write mar_wr_sel segment_force segment
0110010110010000000000000000000000000011000001001100101000000000 // 32b microcode\push.us:39 segment_force segment mem_write a_sel rd_sel rd_sel_source next_instruction
0110010110100000111001000011000000111000000001000000101000000000 // 32c microcode\push.us:48 a_sel b_sel immediate alu_op rd_sel mar_write mar_wr_sel mdr_write segment_force segment
0110010111010000000000000000000000000011000001001100101000000000 // 32d microcode\push.us:50 segment_force segment mem_write a_sel rd_sel rd_sel_source next_instruction
0110010111100000001010000000000000001000010000000000000000000000 // 32e microcode\push.us:54 b_sel alu_op mdr_write ra_sel
0110011000000000111001000011000000110000000001000000101000000000 // 32f microcode\push.us:55 a_sel b_sel immediate alu_op rd_sel mar_write mar_wr_sel segment_force segment
0110011000110000000000000000000000000011000001001100101000000000 // 330 microcode\push.us:57 segment_force segment mem_write a_sel rd_sel rd_sel_source next_instruction
0110011001000000111001000011000000110000000001001100000000000000 // 331 microcode\push.us:64 a_sel b_sel immediate alu_op mar_write mar_wr_sel rd_sel rd_sel_source
0110011001100000001001000000000000001000000000000000101000000000 // 332 microcode\push.us:66 b_sel alu_op mdr_write segment_force segment
0110011010000000000000000000000000000011000000000000101000000000 // 333 microcode\push.us:67 segment_force segment mem_write next_instruction
0110011010100000111001000011000000110000000001001100000000000000 // 334 microcode\push.us:73 a_sel b_sel immediate alu_op mar_write mar_wr_sel rd_sel rd_sel_source
0110011011000000001001000000000000001000000000000000101000000000 // 335 microcode\push.us:75 b_sel alu_op mdr_write segment_force segment
0110011011100000000000000000000000000011000000000000101000000000 // 336 microcode\push.us:76 segment_force segment mem_write next_instruction
0110011100000000111001000011000000110000000001001100101000000000 // 337 microcode\push.us:82 a_sel b_sel immediate alu_op mar_wr_sel mar_write segment_force segment rd_sel rd_sel_source
0110011100100000000000000000000000000011000000000000101000000000 // 338 microcode\push.us:85 segment_force segment mem_write next_instruction
0110011101000000111001000011000000110000000000000000000000000000 // 339 microcode\push.us:91 a_sel ra_sel b_sel immediate alu_op mar_write mar_wr_sel
0110011101100000000000000000000000001000000000000000101000000000 // 33a microcode\push.us:93 a_sel alu_op mdr_write segment_force segment
0110011110010000111001000011000000110010000100000000101000000000 // 33b microcode\push.us:94 segment_force segment mem_write ra_sel a_sel b_sel immediate alu_op mar_wr_sel mar_write
0110011110100000000000000000000000001000000000000000101000000000 // 33c microcode\push.us:98 a_sel alu_op mdr_write segment_force segment
0110011111010000111001000011000000110010001000000000101000000000 // 33d microcode\push.us:99 segment_force segment mem_write ra_sel a_sel b_sel immediate alu_op mar_wr_sel mar_write
0110011111100000000000000000000000001000000000000000101000000000 // 33e microcode\push.us:103 a_sel alu_op mdr_write segment_force segment
0110100000010000111001000011000000110010001100000000101000000000 // 33f microcode\push.us:104 segment_force segment mem_write ra_sel a_sel b_sel immediate alu_op mar_wr_sel mar_write
0110100000100000000000000000000000001000000000000000101000000000 // 340 microcode\push.us:108 a_sel alu_op mdr_write segment_force segment
0110100001010000111001000011000000110010010000000000101000000000 // 341 microcode\push.us:109 segment_force segment mem_write ra_sel a_sel b_sel immediate alu_op mar_wr_sel mar_write
0110100001100000000000000000000000001000000000000000101000000000 // 342 microcode\push.us:113 a_sel alu_op mdr_write segment_force segment
0110100010010000111001000011000000110010010100000000101000000000 // 343 microcode\push.us:114 segment_force segment mem_write ra_sel a_sel b_sel immediate alu_op mar_wr_sel mar_write
0110100010100000000000000000000000001000000000000000101000000000 // 344 microcode\push.us:118 a_sel alu_op mdr_write segment_force segment
0110100011010000111001000011000000110010011000000000101000000000 // 345 microcode\push.us:119 segment_force segment mem_write ra_sel a_sel b_sel immediate alu_op mar_wr_sel mar_write
0110100011100000000000000000000000001000000000000000101000000000 // 346 microcode\push.us:123 a_sel alu_op mdr_write segment_force segment
0110100100010000111001000011000000110010011100000000101000000000 // 347 microcode\push.us:124 segment_force segment mem_write ra_sel a_sel b_sel immediate alu_op mar_wr_sel mar_write
0110100100100000000000000000000000001000000000000000101000000000 // 348 microcode\push.us:127 a_sel alu_op mdr_write segment_force segment
0110100101010000000000000000000000000011000001001100101000000000 // 349 microcode\push.us:128 segment_force segment mem_write rd_sel_source rd_sel a_sel alu_op next_instruction
0110100101100000000000000000000000110000000000000000101000000000 // 34a microcode\push.us:136 a_sel alu_op mar_wr_sel mar_write segment_force segment
0110100110011000000000000000000000000100000001111100101000000000 // 34b microcode\push.us:139 segment_force segment mem_read rd_sel_source rd_sel a_sel
0110100110110000010001000011000000110000000000000000101000000000 // 34c microcode\push.us:141 a_sel b_sel immediate alu_op mar_wr_sel mar_write segment_force segment
0110100111011000000000000000000000000100000001101100101000000000 // 34d microcode\push.us:144 segment_force segment mem_read rd_sel_source rd_sel a_sel
0110100111110000010001000011000000110000000000000000101000000000 // 34e microcode\push.us:146 a_sel b_sel immediate alu_op mar_wr_sel mar_write segment_force segment
0110101000011000000000000000000000000100000001011100101000000000 // 34f microcode\push.us:149 segment_force segment mem_read rd_sel_source rd_sel a_sel
0110101000110000010001001010000000110000000000000000101000000000 // 350 microcode\push.us:152 a_sel b_sel immediate alu_op mar_wr_sel mar_write segment_force segment
0110101001011000000000000000000000000100000000111100101000000000 // 351 microcode\push.us:155 segment_force segment mem_read rd_sel_source rd_sel a_sel
0110101001110000010001000011000000110000000000000000101000000000 // 352 microcode\push.us:157 a_sel b_sel immediate alu_op mar_wr_sel mar_write segment_force segment
0110101010011000000000000000000000000100000000101100101000000000 // 353 microcode\push.us:160 segment_force segment mem_read rd_sel_source rd_sel a_sel
0110101010110000010001000011000000110000000000000000101000000000 // 354 microcode\push.us:162 a_sel b_sel immediate alu_op mar_wr_sel mar_write segment_force segment
0110101011011000000000000000000000000100000000011100101000000000 // 355 microcode\push.us:165 segment_force segment mem_read rd_sel_source rd_sel a_sel
0110101011110000010001000011000000110000000000000000101000000000 // 356 microcode\push.us:167 a_sel b_sel immediate alu_op mar_wr_sel mar_write segment_force segment
0110101100011000000000000000000000000100000000001100101000000000 // 357 microcode\push.us:170 segment_force segment mem_read rd_sel_source rd_sel a_sel
0110101100110000010001000011000000000001000001001100000000000000 // 358 microcode\push.us:172 a_sel b_sel immediate alu_op rd_sel_source rd_sel next_instruction
0110101101000010100001000101000000000001000000001000000000110110 // 359 microcode\rcl.us:8 a_sel b_sel immediate alu_op rd_sel_source update_flags width next_instruction
0110101101100000000000000000000000000100000000000000110000000010 // 35a microcode\rcl.us:8 segment mem_read width
1001001100111010100001000101000000001000000000000000110000110110 // 35b microcode\rcl.us:8 width a_sel b_sel immediate alu_op mdr_write update_flags segment jump_type jump_target
0110101110100000001000000000000010000000100000000000110010000010 // 35c microcode\rcl.us:9 ra_modrm_rm_reg b_sel alu_op tmp_wr_en width segment jump_type jump_target
0110101111000010100000000000000000000001100000001000000011010110 // 35d microcode\rcl.us:9 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0110101111100000000000000000000000000100000010000000110000000010 // 35e microcode\rcl.us:9 segment mem_read width rb_cl
1001001100111010100000000000000000001000000000000000110011010110 // 35f microcode\rcl.us:9 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0110110000100010100001000000000000000001100000001000000011010110 // 360 microcode\rcl.us:10 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0110110001000000000000000000000000000100000000000000110000000010 // 361 microcode\rcl.us:10 segment mem_read width
1001001100111010100001000000000000001000000000000000110011010110 // 362 microcode\rcl.us:10 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0110110000000000001001000000000010000000100000000000110010000000 // 363 microcode\rcl.us:11 tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0110110010100010101001000101000000000001000000001000000000110110 // 364 microcode\rcr.us:8 a_sel b_sel immediate alu_op rd_sel_source update_flags width next_instruction
0110110011000000000000000000000000000100000000000000110000000010 // 365 microcode\rcr.us:8 segment mem_read width
1001001100111010101001000101000000001000000000000000110000110110 // 366 microcode\rcr.us:8 width a_sel b_sel immediate alu_op mdr_write update_flags segment jump_type jump_target
0110110100000000001000000000000010000000100000000000110010000010 // 367 microcode\rcr.us:9 ra_modrm_rm_reg b_sel alu_op tmp_wr_en width segment jump_type jump_target
0110110100100010101000000000000000000001100000001000000011010110 // 368 microcode\rcr.us:9 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0110110101000000000000000000000000000100000010000000110000000010 // 369 microcode\rcr.us:9 segment mem_read width rb_cl
1001001100111010101000000000000000001000000000000000110011010110 // 36a microcode\rcr.us:9 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0110110110000010101001000000000000000001100000001000000011010110 // 36b microcode\rcr.us:10 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0110110110100000000000000000000000000100000000000000110000000010 // 36c microcode\rcr.us:10 segment mem_read width
1001001100111010101001000000000000001000000000000000110011010110 // 36d microcode\rcr.us:10 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0110110101100000001001000000000010000000100000000000110010000000 // 36e microcode\rcr.us:11 tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0110111000000000000000000000000000110000000000000000101000000000 // 36f microcode\ret.us:9 a_sel alu_op mar_write mar_wr_sel segment segment_force
0110111000110000010001000011000000000100000001001100101000000000 // 370 microcode\ret.us:11 segment segment_force mem_read a_sel b_sel immediate alu_op rd_sel_source rd_sel
0110111001011000000000000000000001000001000000000000000000000000 // 371 microcode\ret.us:14 a_sel alu_op load_ip next_instruction
0110111001100000000000000000000000110000000000000000101000000000 // 372 microcode\ret.us:20 a_sel alu_op mar_write mar_wr_sel segment segment_force
0110111010010000010001000011000000000100000001001100101000000000 // 373 microcode\ret.us:22 segment segment_force mem_read a_sel b_sel immediate alu_op rd_sel_source rd_sel
0110111010111000000000000000000001000000010000000000000000000000 // 374 microcode\ret.us:25 a_sel alu_op load_ip ra_sel
0110111011000000010001000000000000000001000001001100000000000000 // 375 microcode\ret.us:26 a_sel b_sel alu_op rd_sel_source rd_sel next_instruction
0110111011100000000000000000000000110000000000000000101000000000 // 376 microcode\ret.us:33 a_sel alu_op mar_write mar_wr_sel segment segment_force
0110111100010000010001000011000000110100000000000000101000000000 // 377 microcode\ret.us:35 segment segment_force mem_read a_sel b_sel immediate alu_op mar_wr_sel mar_write
0110111100111000000000000000000001000000000000000000101000000000 // 378 microcode\ret.us:37 a_sel alu_op load_ip segment_force segment
0110111101010000010001000011000000000100000001001100101000000000 // 379 microcode\ret.us:38 segment segment_force mem_read a_sel b_sel immediate alu_op rd_sel_source rd_sel
0110111101111000000000000000000000000001000000000000011100000000 // 37a microcode\ret.us:41 a_sel alu_op segment_force segment segment_wr_en next_instruction
0110111110000000000000000000000000110000000000000000101000000000 // 37b microcode\ret.us:48 a_sel alu_op mar_write mar_wr_sel segment segment_force
0110111110110000010001000011000000110100000000000000101000000000 // 37c microcode\ret.us:50 segment segment_force mem_read a_sel b_sel immediate alu_op mar_wr_sel mar_write
0110111111011000000000000000000001000000000000000000101000000000 // 37d microcode\ret.us:52 a_sel alu_op load_ip segment_force segment
0110111111110000010001000011000000110100000000000000101000000000 // 37e microcode\ret.us:53 segment segment_force mem_read a_sel b_sel immediate alu_op mar_wr_sel mar_write
0111000000010000010001000000000000000000000001001100000000000000 // 37f microcode\ret.us:55 a_sel b_sel alu_op rd_sel_source rd_sel
0111000000111000000000000000000000000001000000000000011100000000 // 380 microcode\ret.us:57 a_sel alu_op segment_force segment segment_wr_en next_instruction
0111000001000000000000000000000000110000000000000000101000000000 // 381 microcode\ret.us:65 a_sel alu_op mar_write mar_wr_sel segment segment_force
0111000001110000010001000011000000110100000000000000101000000000 // 382 microcode\ret.us:67 segment segment_force mem_read a_sel b_sel immediate alu_op mar_wr_sel mar_write
0111000010011000000000000000000001000000000000000000101000000000 // 383 microcode\ret.us:69 a_sel alu_op load_ip segment_force segment
0111000010100000000000000000000000000100000000000000101000000000 // 384 microcode\ret.us:70 segment segment_force mem_read
0111000011011000000000000000000000000000000000000000011100000000 // 385 microcode\ret.us:71 a_sel alu_op segment_force segment segment_wr_en
0111000011110000010001000011000000110000000000000000101000000000 // 386 microcode\ret.us:73 a_sel b_sel immediate alu_op mar_wr_sel mar_write segment segment_force
0111000100011001101000000000000000000100000000000000101000110000 // 387 microcode\ret.us:75 segment segment_force mem_read a_sel alu_op update_flags
0111000100110000010001100011000000000001000001001100000000000000 // 388 microcode\ret.us:77 a_sel b_sel immediate alu_op rd_sel rd_sel_source ext_int_inhibit next_instruction
0111000101000010011001000101000000000001000000001000000000110110 // 389 microcode\rol.us:8 a_sel b_sel immediate alu_op rd_sel_source update_flags width next_instruction
0111000101100000000000000000000000000100000000000000110000000010 // 38a microcode\rol.us:8 segment mem_read width
1001001100111010011001000101000000001000000000000000110000110110 // 38b microcode\rol.us:8 width a_sel b_sel immediate alu_op mdr_write update_flags segment jump_type jump_target
0111000110100000001000000000000010000000100000000000110010000010 // 38c microcode\rol.us:9 ra_modrm_rm_reg b_sel alu_op tmp_wr_en width segment jump_type jump_target
0111000111000010011000000000000000000001100000001000000011010110 // 38d microcode\rol.us:9 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0111000111100000000000000000000000000100000010000000110000000010 // 38e microcode\rol.us:9 segment mem_read width rb_cl
1001001100111010011000000000000000001000000000000000110011010110 // 38f microcode\rol.us:9 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0111001000100010011001000000000000000001100000001000000011010110 // 390 microcode\rol.us:10 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0111001001000000000000000000000000000100000000000000110000000010 // 391 microcode\rol.us:10 segment mem_read width
1001001100111010011001000000000000001000000000000000110011010110 // 392 microcode\rol.us:10 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0111001000000000001001000000000010000000100000000000110010000000 // 393 microcode\rol.us:11 tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0111001010100010010001000101000000000001000000001000000000110110 // 394 microcode\ror.us:8 a_sel b_sel immediate alu_op rd_sel_source update_flags width next_instruction
0111001011000000000000000000000000000100000000000000110000000010 // 395 microcode\ror.us:8 segment mem_read width
1001001100111010010001000101000000001000000000000000110000110110 // 396 microcode\ror.us:8 width a_sel b_sel immediate alu_op mdr_write update_flags segment jump_type jump_target
0111001100000000001000000000000010000000100000000000110010000010 // 397 microcode\ror.us:9 ra_modrm_rm_reg b_sel alu_op tmp_wr_en width segment jump_type jump_target
0111001100100010010000000000000000000001100000001000000011010110 // 398 microcode\ror.us:9 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0111001101000000000000000000000000000100000010000000110000000010 // 399 microcode\ror.us:9 segment mem_read width rb_cl
1001001100111010010000000000000000001000000000000000110011010110 // 39a microcode\ror.us:9 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0111001110000010010001000000000000000001100000001000000011010110 // 39b microcode\ror.us:10 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0111001110100000000000000000000000000100000000000000110000000010 // 39c microcode\ror.us:10 segment mem_read width
1001001100111010010001000000000000001000000000000000110011010110 // 39d microcode\ror.us:10 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0111001101100000001001000000000010000000100000000000110010000000 // 39e microcode\ror.us:11 tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0111010000000010001001000101000000000001000000001000000000010010 // 39f microcode\sar.us:8 a_sel b_sel immediate alu_op rd_sel_source update_flags width next_instruction
0111010000100000000000000000000000000100000000000000110000000010 // 3a0 microcode\sar.us:8 segment mem_read width
1001001100111010001001000101000000001000000000000000110000010010 // 3a1 microcode\sar.us:8 width a_sel b_sel immediate alu_op mdr_write update_flags segment jump_type jump_target
0111010001100000001000000000000010000000100000000000110010000010 // 3a2 microcode\sar.us:9 ra_modrm_rm_reg b_sel alu_op tmp_wr_en width segment jump_type jump_target
0111010010000010001000000000000000000001100000001000000011111010 // 3a3 microcode\sar.us:9 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0111010010100000000000000000000000000100000010000000110000000010 // 3a4 microcode\sar.us:9 segment mem_read width rb_cl
1001001100111010001000000000000000001000000000000000110011111010 // 3a5 microcode\sar.us:9 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0111010011100010001001000000000000000001100000001000000011111010 // 3a6 microcode\sar.us:10 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0111010100000000000000000000000000000100000000000000110000000010 // 3a7 microcode\sar.us:10 segment mem_read width
1001001100111010001001000000000000001000000000000000110011111010 // 3a8 microcode\sar.us:10 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0111010011000000001001000000000010000000100000000000110010000000 // 3a9 microcode\sar.us:11 tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0111010101100001001000000000000000000001000000001000000000001110 // 3aa microcode\sbb.us:8 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0111010110000000000000000000000000000100000000000000110000000010 // 3ab microcode\sbb.us:8 segment mem_read width
1001001100111001001000000000000000001000000000000000110000001110 // 3ac microcode\sbb.us:8 a_sel b_sel alu_op mdr_write update_flags width segment jump_type jump_target
0111010111000001010000000000000000000001000000000100000000001110 // 3ad microcode\sbb.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0111010111100000000000000000000000000100000000000000110000000010 // 3ae microcode\sbb.us:9 segment mem_read width
0111011000011001010000000000000000000001000000000100000000001110 // 3af microcode\sbb.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0111011000100001001001000000000000000001000000001100000000001110 // 3b0 microcode\sbb.us:10 a_sel b_sel alu_op rd_sel_source rd_sel update_flags width next_instruction
0111011001000001001001000000000000000001000000001000000000001110 // 3b1 microcode\sbb.us:11 a_sel b_sel alu_op rd_sel_source width update_flags next_instruction
0111011001100000000000000000000000000100000000000000110000000010 // 3b2 microcode\sbb.us:11 segment mem_read width
1001001100111001001001000000000000001000000000000000110000001110 // 3b3 microcode\sbb.us:11 a_sel b_sel alu_op mdr_write update_flags segment width jump_type jump_target
0111011011000000000000000000000000000000100000000000000000000000 // 3b4 microcode\sbb.us:12 ra_modrm_rm_reg jump_type jump_target
0111011011100000000000000000000000000000100000000000110000000000 // 3b5 microcode\sbb.us:12 ra_modrm_rm_reg segment jump_type jump_target
0111011011100001001001000000000000000001000000001000000000001100 // 3b6 microcode\sbb.us:12 a_sel b_sel alu_op rd_sel_source update_flags next_instruction
0111011100000000000000000000000000000100000000000000110000000000 // 3b7 microcode\sbb.us:12 segment mem_read
1001001100011001001001000000000000001000000000000000110000001100 // 3b8 microcode\sbb.us:12 a_sel b_sel alu_op mdr_write update_flags segment jump_type jump_target
0111011110000000000000000000001000110000011110000000000000000000 // 3b9 microcode\scas.us:10 ra_sel a_sel alu_op mar_wr_sel mar_write rb_cl jump_type jump_target
0111011111100000000000000000010000000000000100000000000000000000 // 3ba microcode\scas.us:13 ra_sel jump_type jump_target
0111011110000000111001000101000000000000011100011100001000000000 // 3bb microcode\scas.us:14 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel segment segment_force
0111011110100000000000000000000000000100000000000000001010000001 // 3bc microcode\scas.us:17 width segment segment_force mem_read ra_sel a_sel alu_op tmp_wr_en
0111100000011001000011000000001000000000000000000000000000001101 // 3bd microcode\scas.us:19 width a_sel b_sel alu_op update_flags jump_type jump_target
0111011101010010111001010101001100110000000011111100001000000000 // 3be microcode\scas.us:21 a_sel b_sel immediate alu_op rd_sel_source rd_sel mar_write mar_wr_sel rb_cl ext_int_yield jump_type segment segment_force jump_target
0111100000000000000000000000000000000001000000000000000000000000 // 3bf microcode\scas.us:26 next_instruction
0111100000110010111001000101000000000001000001111100000000000000 // 3c0 microcode\scas.us:28 a_sel b_sel immediate alu_op rd_sel_source rd_sel next_instruction
0111100010000000000000000000001000110000011110000000000000000000 // 3c1 microcode\scas.us:36 ra_sel a_sel alu_op mar_wr_sel mar_write rb_cl jump_type jump_target
0111100011100000000000000000010000000000000100000000000000000000 // 3c2 microcode\scas.us:39 ra_sel jump_type jump_target
0111100010000000111001000101000000000000011100011100001000000000 // 3c3 microcode\scas.us:40 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel segment segment_force
0111100010100000000000000000000000000100000000000000001010000000 // 3c4 microcode\scas.us:43 segment segment_force mem_read ra_sel a_sel alu_op tmp_wr_en
0111100100011001000011000000001000000000000000000000000000001100 // 3c5 microcode\scas.us:45 a_sel b_sel alu_op update_flags jump_type jump_target
0111100001010010111001010011001100110000000011111100001000000000 // 3c6 microcode\scas.us:47 a_sel b_sel immediate alu_op rd_sel_source rd_sel mar_write mar_wr_sel rb_cl ext_int_yield jump_type segment segment_force jump_target
0111100100000000000000000000000000000001000000000000000000000000 // 3c7 microcode\scas.us:52 next_instruction
0111100100110010111001000011000000000001000001111100000000000000 // 3c8 microcode\scas.us:54 a_sel b_sel immediate alu_op rd_sel_source rd_sel next_instruction
0111100101000010000001000101000000000001000000001000000000010010 // 3c9 microcode\shl.us:8 a_sel b_sel immediate alu_op rd_sel_source update_flags width next_instruction
0111100101100000000000000000000000000100000000000000110000000010 // 3ca microcode\shl.us:8 segment mem_read width
1001001100111010000001000101000000001000000000000000110000010010 // 3cb microcode\shl.us:8 width a_sel b_sel immediate alu_op mdr_write update_flags segment jump_type jump_target
0111100110100000001000000000000010000000100000000000110010000010 // 3cc microcode\shl.us:9 ra_modrm_rm_reg b_sel alu_op tmp_wr_en width segment jump_type jump_target
0111100111000010000000000000000000000001100000001000000011111010 // 3cd microcode\shl.us:9 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0111100111100000000000000000000000000100000010000000110000000010 // 3ce microcode\shl.us:9 segment mem_read width rb_cl
1001001100111010000000000000000000001000000000000000110011111010 // 3cf microcode\shl.us:9 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0111101000100010000001000000000000000001100000001000000011111010 // 3d0 microcode\shl.us:10 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0111101001000000000000000000000000000100000000000000110000000010 // 3d1 microcode\shl.us:10 segment mem_read width
1001001100111010000001000000000000001000000000000000110011111010 // 3d2 microcode\shl.us:10 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0111101000000000001001000000000010000000100000000000110010000000 // 3d3 microcode\shl.us:11 tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0111101010100001111001000101000000000001000000001000000000010010 // 3d4 microcode\shr.us:8 a_sel b_sel immediate alu_op rd_sel_source update_flags width next_instruction
0111101011000000000000000000000000000100000000000000110000000010 // 3d5 microcode\shr.us:8 segment mem_read width
1001001100111001111001000101000000001000000000000000110000010010 // 3d6 microcode\shr.us:8 width a_sel b_sel immediate alu_op mdr_write update_flags segment jump_type jump_target
0111101100000000001000000000000010000000100000000000110010000010 // 3d7 microcode\shr.us:9 ra_modrm_rm_reg b_sel alu_op tmp_wr_en width segment jump_type jump_target
0111101100100001111000000000000000000001100000001000000011111010 // 3d8 microcode\shr.us:9 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0111101101000000000000000000000000000100000010000000110000000010 // 3d9 microcode\shr.us:9 segment mem_read width rb_cl
1001001100111001111000000000000000001000000000000000110011111010 // 3da microcode\shr.us:9 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0111101110000001111001000000000000000001100000001000000011111010 // 3db microcode\shr.us:10 a_sel b_sel alu_op rd_sel_source update_flags width tmp_wr_sel tmp_wr_en next_instruction ra_modrm_rm_reg
0111101110100000000000000000000000000100000000000000110000000010 // 3dc microcode\shr.us:10 segment mem_read width
1001001100111001111001000000000000001000000000000000110011111010 // 3dd microcode\shr.us:10 width a_sel b_sel alu_op mdr_write update_flags segment tmp_wr_sel tmp_wr_en jump_type jump_target
0111101101100000001001000000000010000000100000000000110010000000 // 3de microcode\shr.us:11 tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0111110000000000000000000000000000001000000000000000000000000001 // 3df microcode\stos.us:10 width a_sel alu_op mdr_write
0111110001100000000000000000001000000000011110000000000000000000 // 3e0 microcode\stos.us:11 ra_sel rb_cl jump_type jump_target
0111110100100000000000000000010000000000000100000000000000000000 // 3e1 microcode\stos.us:13 ra_sel jump_type jump_target
0111110001100000111001000101000000000000011100011100000000000000 // 3e2 microcode\stos.us:14 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel
0111110010000000000000000000000000110000011100000000000000000000 // 3e3 microcode\stos.us:17 ra_sel a_sel alu_op mar_wr_sel mar_write
0111110010100010111001000101000000000000000001111100000000000000 // 3e4 microcode\stos.us:18 a_sel b_sel immediate alu_op rd_sel_source rd_sel
0111110011000000000000000000000000000000000000000000000000000001 // 3e5 microcode\stos.us:20 width ra_sel
0111110011100000000000000000000000001000000000000000001000000001 // 3e6 microcode\stos.us:21 width alu_op mdr_write segment segment_force
0111110100100000000000000000001000000010000000000000001000000001 // 3e7 microcode\stos.us:22 width segment segment_force mem_write jump_type jump_target
0111110000100000000000010000000000000000000010000000000000000000 // 3e8 microcode\stos.us:23 rb_cl ext_int_yield jump_type jump_target
0111110101000000000000000000000000000001000000000000000000000000 // 3e9 microcode\stos.us:25 next_instruction
0111110110100000000000000000001000001000011110000000000000000000 // 3ea microcode\stos.us:32 a_sel alu_op mdr_write ra_sel rb_cl jump_type jump_target
0111111000100000000000000000010000000000000100000000000000000000 // 3eb microcode\stos.us:35 ra_sel jump_type jump_target
0111110110100000111001000101000000000000011100011100000000000000 // 3ec microcode\stos.us:36 ra_sel a_sel b_sel immediate alu_op rd_sel_source rd_sel
0111110111000000000000000000000000110000011100000000000000000000 // 3ed microcode\stos.us:39 ra_sel a_sel alu_op mar_wr_sel mar_write
0111110111100010111001000011000000000000000001111100001000000000 // 3ee microcode\stos.us:40 a_sel b_sel immediate alu_op rd_sel_source rd_sel segment segment_force
0111111000100000000000000000001000000010000000000000001000000000 // 3ef microcode\stos.us:42 segment segment_force mem_write jump_type jump_target
0111110101100000000000010000000000000000000010000000000000000000 // 3f0 microcode\stos.us:43 rb_cl ext_int_yield jump_type jump_target
0111111001000000000000000000000000000001000000000000000000000000 // 3f1 microcode\stos.us:45 next_instruction
0111111001100000111000000000000000000001000000001000000000001110 // 3f2 microcode\sub.us:8 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0111111010000000000000000000000000000100000000000000110000000010 // 3f3 microcode\sub.us:8 segment mem_read width
1001001100111000111000000000000000001000000000000000110000001110 // 3f4 microcode\sub.us:8 a_sel b_sel alu_op mdr_write update_flags width segment jump_type jump_target
0111111011000001000000000000000000000001000000000100000000001110 // 3f5 microcode\sub.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0111111011100000000000000000000000000100000000000000110000000010 // 3f6 microcode\sub.us:9 segment mem_read width
0111111100011001000000000000000000000001000000000100000000001110 // 3f7 microcode\sub.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
0111111100100000111001000000000000000001000000001100000000001110 // 3f8 microcode\sub.us:10 a_sel b_sel alu_op rd_sel_source rd_sel update_flags width next_instruction
0111111101000000111001000000000000000001000000001000000000001110 // 3f9 microcode\sub.us:11 a_sel b_sel alu_op rd_sel_source width update_flags next_instruction
0111111101100000000000000000000000000100000000000000110000000010 // 3fa microcode\sub.us:11 segment mem_read width
1001001100111000111001000000000000001000000000000000110000001110 // 3fb microcode\sub.us:11 a_sel b_sel alu_op mdr_write update_flags segment width jump_type jump_target
0111111111000000000000000000000000000000100000000000000000000000 // 3fc microcode\sub.us:12 ra_modrm_rm_reg jump_type jump_target
0111111111100000000000000000000000000000100000000000110000000000 // 3fd microcode\sub.us:12 ra_modrm_rm_reg segment jump_type jump_target
0111111111100000111001000000000000000001000000001000000000001100 // 3fe microcode\sub.us:12 a_sel b_sel alu_op rd_sel_source update_flags next_instruction
1000000000000000000000000000000000000100000000000000110000000000 // 3ff microcode\sub.us:12 segment mem_read
1001001100011000111001000000000000001000000000000000110000001100 // 400 microcode\sub.us:12 a_sel b_sel alu_op mdr_write update_flags segment jump_type jump_target
1000000001000000100000000000000000000001000000000000000000010010 // 401 microcode\test.us:8 a_sel b_sel alu_op update_flags width next_instruction
1000000001100000000000000000000000000100000000000000110000000010 // 402 microcode\test.us:8 segment mem_read width
1000000010011000100000000000000000000001000000000000000000010010 // 403 microcode\test.us:8 a_sel b_sel alu_op update_flags width next_instruction
1000000010100000100001000000000000000001000000000000000000010010 // 404 microcode\test.us:9 a_sel b_sel alu_op update_flags width next_instruction
1000000011000000100001000000000000000001000000000000000000010001 // 405 microcode\test.us:10 a_sel b_sel alu_op update_flags width next_instruction
1000000011100000000000000000000000000100000000000000110000000001 // 406 microcode\test.us:10 segment mem_read width
1000000100011000100001000000000000000001000000000000000000010001 // 407 microcode\test.us:10 a_sel b_sel alu_op update_flags width next_instruction
1000000100100000100001000000000000000001000000000000000000010000 // 408 microcode\test.us:11 a_sel b_sel alu_op update_flags next_instruction
1000000101000000000000000000000000000100000000000000110000000000 // 409 microcode\test.us:11 segment mem_read
1000000101111000100001000000000000000001000000000000000000010000 // 40a microcode\test.us:11 a_sel b_sel alu_op update_flags next_instruction
1000001000000000000000000000000000110000000000000000000000000010 // 40b microcode\xchg.us:13 width a_sel alu_op mar_write mar_wr_sel jump_type jump_target
1000000110100000000000000000000000000100000000000000110000000010 // 40c microcode\xchg.us:16 segment width mem_read
1000000111000000001000000000000000110000000000000000000000000010 // 40d microcode\xchg.us:17 width b_sel alu_op mar_write mar_wr_sel
1000000111111000000000000000000000000000000000000100000000000010 // 40e microcode\xchg.us:19 width a_sel alu_op rd_sel_source
1001001100110000000000000000000000011000000000000000110000000010 // 40f microcode\xchg.us:20 width a_sel alu_op mdr_write mar_wr_sel mar_write segment jump_type jump_target
1000001000100000001000000000000000000000000000001000000000000010 // 410 microcode\xchg.us:24 width b_sel alu_op rd_sel_source
1000001001010000000000000000000000000001000000000100000000000010 // 411 microcode\xchg.us:25 width a_sel alu_op rd_sel_source next_instruction
1000001001100000000000000000000000110000000000000000000000000000 // 412 microcode\xchg.us:31 a_sel alu_op mar_write mar_wr_sel ra_sel
1000001010000000000000000000000000000000000000011100000000000000 // 413 microcode\xchg.us:31 a_sel alu_op rd_sel_source rd_sel
1000001010110000000000000000000000000001000000001100000000000000 // 414 microcode\xchg.us:31 a_sel alu_op rd_sel_source rd_sel next_instruction
1000001011000000000000000000000000110000000000000000000000000000 // 415 microcode\xchg.us:32 a_sel alu_op mar_write mar_wr_sel ra_sel
1000001011100000000000000000000000000000000000101100000000000000 // 416 microcode\xchg.us:32 a_sel alu_op rd_sel_source rd_sel
1000001100010000000000000000000000000001000000001100000000000000 // 417 microcode\xchg.us:32 a_sel alu_op rd_sel_source rd_sel next_instruction
1000001100100000000000000000000000110000000000000000000000000000 // 418 microcode\xchg.us:33 a_sel alu_op mar_write mar_wr_sel ra_sel
1000001101000000000000000000000000000000000000111100000000000000 // 419 microcode\xchg.us:33 a_sel alu_op rd_sel_source rd_sel
1000001101110000000000000000000000000001000000001100000000000000 // 41a microcode\xchg.us:33 a_sel alu_op rd_sel_source rd_sel next_instruction
1000001110000000000000000000000000110000000000000000000000000000 // 41b microcode\xchg.us:34 a_sel alu_op mar_write mar_wr_sel ra_sel
1000001110100000000000000000000000000000000001001100000000000000 // 41c microcode\xchg.us:34 a_sel alu_op rd_sel_source rd_sel
1000001111010000000000000000000000000001000000001100000000000000 // 41d microcode\xchg.us:34 a_sel alu_op rd_sel_source rd_sel next_instruction
1000001111100000000000000000000000110000000000000000000000000000 // 41e microcode\xchg.us:35 a_sel alu_op mar_write mar_wr_sel ra_sel
1000010000000000000000000000000000000000000001011100000000000000 // 41f microcode\xchg.us:35 a_sel alu_op rd_sel_source rd_sel
1000010000110000000000000000000000000001000000001100000000000000 // 420 microcode\xchg.us:35 a_sel alu_op rd_sel_source rd_sel next_instruction
1000010001000000000000000000000000110000000000000000000000000000 // 421 microcode\xchg.us:36 a_sel alu_op mar_write mar_wr_sel ra_sel
1000010001100000000000000000000000000000000001101100000000000000 // 422 microcode\xchg.us:36 a_sel alu_op rd_sel_source rd_sel
1000010010010000000000000000000000000001000000001100000000000000 // 423 microcode\xchg.us:36 a_sel alu_op rd_sel_source rd_sel next_instruction
1000010010100000000000000000000000110000000000000000000000000000 // 424 microcode\xchg.us:37 a_sel alu_op mar_write mar_wr_sel ra_sel
1000010011000000000000000000000000000000000001111100000000000000 // 425 microcode\xchg.us:37 a_sel alu_op rd_sel_source rd_sel
1000010011110000000000000000000000000001000000001100000000000000 // 426 microcode\xchg.us:37 a_sel alu_op rd_sel_source rd_sel next_instruction
1000010100000000000000000000000000000000001100000000000010000000 // 427 microcode\xlat.us:9 a_sel alu_op tmp_wr_en ra_sel
1000010100100000000000000000000000110000000000000000000000000000 // 428 microcode\xlat.us:10 a_sel alu_op mar_wr_sel mar_write
1000010101010000010011000000000000110000000000000000110000000000 // 429 microcode\xlat.us:11 a_sel b_sel alu_op mar_wr_sel mar_write segment
1000010101111000000000000000000000000101000000001100110000000001 // 42a microcode\xlat.us:12 segment width mem_read a_sel alu_op rd_sel_source rd_sel next_instruction
1000010110000000101000000000000000000001000000001000000000010010 // 42b microcode\xor.us:8 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
1000010110100000000000000000000000000100000000000000110000000010 // 42c microcode\xor.us:8 segment mem_read width
1001001100111000101000000000000000001000000000000000110000010010 // 42d microcode\xor.us:8 a_sel b_sel alu_op mdr_write update_flags width segment jump_type jump_target
1000010111100000101000000000000000000001000000000100000000010010 // 42e microcode\xor.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
1000011000000000000000000000000000000100000000000000110000000010 // 42f microcode\xor.us:9 segment mem_read width
1000011000111000101000000000000000000001000000000100000000010010 // 430 microcode\xor.us:9 a_sel b_sel alu_op rd_sel_source update_flags width next_instruction
1000011001000000101001000000000000000001000000001100000000010010 // 431 microcode\xor.us:10 a_sel b_sel alu_op rd_sel_source rd_sel update_flags width next_instruction
1000011001100000101001000000000000000001000000001000000000010010 // 432 microcode\xor.us:11 a_sel b_sel alu_op rd_sel_source width update_flags next_instruction
1000011010000000000000000000000000000100000000000000110000000010 // 433 microcode\xor.us:11 segment mem_read width
1001001100111000101001000000000000001000000000000000110000010010 // 434 microcode\xor.us:11 a_sel b_sel alu_op mdr_write update_flags segment width jump_type jump_target
1000011011100000000000000000000000000000100000000000000000000000 // 435 microcode\xor.us:12 ra_modrm_rm_reg jump_type jump_target
1000011100000000000000000000000000000000100000000000110000000000 // 436 microcode\xor.us:12 ra_modrm_rm_reg segment jump_type jump_target
1000011100000000101001000000000000000001000000001000000000010000 // 437 microcode\xor.us:12 a_sel b_sel alu_op rd_sel_source update_flags next_instruction
1000011100100000000000000000000000000100000000000000110000000000 // 438 microcode\xor.us:12 segment mem_read
1001001100011000101001000000000000001000000000000000110000010000 // 439 microcode\xor.us:12 a_sel b_sel alu_op mdr_write update_flags segment jump_type jump_target
0010010110100000001001000010000000000000000000000000000010000000 // 43a microcode\microcode.us:65 b_sel immediate alu_op tmp_wr_en jump_type jump_target
0010100110000000000000000000000010000000100000000000110000000010 // 43b microcode\microcode.us:73 width ra_modrm_rm_reg segment jump_type jump_target
0101110111100000000000000000000010000000100000000000110000000010 // 43c microcode\microcode.us:74 width ra_modrm_rm_reg segment jump_type jump_target
0010011110100000000000000000000010000000100000000000110000000010 // 43d microcode\microcode.us:75 width ra_modrm_rm_reg segment jump_type jump_target
0111011000100000000000000000000010000000100000000000110000000010 // 43e microcode\microcode.us:76 width ra_modrm_rm_reg segment jump_type jump_target
0010101101100000000000000000000010000000100000000000110000000010 // 43f microcode\microcode.us:77 width ra_modrm_rm_reg segment jump_type jump_target
0111111100100000000000000000000010000000100000000000110000000010 // 440 microcode\microcode.us:78 width ra_modrm_rm_reg segment jump_type jump_target
1000011001000000000000000000000010000000100000000000110000000010 // 441 microcode\microcode.us:79 width ra_modrm_rm_reg segment jump_type jump_target
0011001001100000000000000000000010000000100000000000110000000010 // 442 microcode\microcode.us:80 width ra_modrm_rm_reg segment jump_type jump_target
0010100111100000000000000000000010000000000000000000110000000000 // 443 microcode\microcode.us:98 segment jump_type jump_target
0101111001000000000000000000000010000000000000000000110000000000 // 444 microcode\microcode.us:99 segment jump_type jump_target
0010100000000000000000000000000010000000000000000000110000000000 // 445 microcode\microcode.us:100 segment jump_type jump_target
0111011010000000000000000000000010000000000000000000110000000000 // 446 microcode\microcode.us:101 segment jump_type jump_target
0010101111000000000000000000000010000000000000000000110000000000 // 447 microcode\microcode.us:102 segment jump_type jump_target
0111111110000000000000000000000010000000000000000000110000000000 // 448 microcode\microcode.us:103 segment jump_type jump_target
1000011010100000000000000000000010000000000000000000110000000000 // 449 microcode\microcode.us:104 segment jump_type jump_target
0011001011000000000000000000000010000000000000000000110000000000 // 44a microcode\microcode.us:105 segment jump_type jump_target
0101111011100000000000000000000010000000010000000000000000000000 // 44b microcode\microcode.us:112 ra_sel jump_type jump_target
1000100110100000000000000000000000000001000000000000000000000000 // 44c microcode\microcode.us:113 next_instruction
1000100111000000000000000000000000000001000000000000000000000000 // 44d microcode\microcode.us:114 next_instruction
1000100111100000000000000000000000000001000000000000000000000000 // 44e microcode\microcode.us:115 next_instruction
1000101000000000000000000000000000000001000000000000000000000000 // 44f microcode\microcode.us:116 next_instruction
1000101000100000000000000000000000000001000000000000000000000000 // 450 microcode\microcode.us:117 next_instruction
1000101001000000000000000000000000000001000000000000000000000000 // 451 microcode\microcode.us:118 next_instruction
1000101001100000000000000000000000000001000000000000000000000000 // 452 microcode\microcode.us:119 next_instruction
0111000100100000000000000000000010000000100000000000110000000010 // 453 microcode\microcode.us:126 width ra_modrm_rm_reg segment jump_type jump_target
0111001010000000000000000000000010000000100000000000110000000010 // 454 microcode\microcode.us:127 width ra_modrm_rm_reg segment jump_type jump_target
0110101100100000000000000000000010000000100000000000110000000010 // 455 microcode\microcode.us:128 width ra_modrm_rm_reg segment jump_type jump_target
0110110010000000000000000000000010000000100000000000110000000010 // 456 microcode\microcode.us:129 width ra_modrm_rm_reg segment jump_type jump_target
0111100100100000000000000000000010000000100000000000110000000010 // 457 microcode\microcode.us:130 width ra_modrm_rm_reg segment jump_type jump_target
0111101010000000000000000000000010000000100000000000110000000010 // 458 microcode\microcode.us:131 width ra_modrm_rm_reg segment jump_type jump_target
0111100100100000000000000000000010000000100000000000110000000010 // 459 microcode\microcode.us:132 width ra_modrm_rm_reg segment jump_type jump_target
0111001111100000000000000000000010000000100000000000110000000010 // 45a microcode\microcode.us:133 width ra_modrm_rm_reg segment jump_type jump_target
0111001000000000001001000000000010000000100000000000110010000001 // 45b microcode\microcode.us:141 width tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0111001101100000001001000000000010000000100000000000110010000001 // 45c microcode\microcode.us:143 width tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0110110000000000001001000000000010000000100000000000110010000001 // 45d microcode\microcode.us:145 width tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0110110101100000001001000000000010000000100000000000110010000001 // 45e microcode\microcode.us:147 width tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0111101000000000001001000000000010000000100000000000110010000001 // 45f microcode\microcode.us:149 width tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0111101101100000001001000000000010000000100000000000110010000001 // 460 microcode\microcode.us:151 width tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0111101000000000001001000000000010000000100000000000110010000001 // 461 microcode\microcode.us:153 width tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0111010011000000001001000000000010000000100000000000110010000001 // 462 microcode\microcode.us:155 width tmp_wr_en alu_op b_sel ra_modrm_rm_reg segment jump_type jump_target
0111001001100000001001000000000000000000000000000000000010000001 // 463 microcode\microcode.us:163 width tmp_wr_en alu_op b_sel jump_type jump_target
0111001111000000001001000000000000000000000000000000000010000001 // 464 microcode\microcode.us:164 width tmp_wr_en alu_op b_sel jump_type jump_target
0110110001100000001001000000000000000000000000000000000010000001 // 465 microcode\microcode.us:165 width tmp_wr_en alu_op b_sel jump_type jump_target
0110110111000000001001000000000000000000000000000000000010000001 // 466 microcode\microcode.us:166 width tmp_wr_en alu_op b_sel jump_type jump_target
0111101001100000001001000000000000000000000000000000000010000001 // 467 microcode\microcode.us:167 width tmp_wr_en alu_op b_sel jump_type jump_target
0111101111000000001001000000000000000000000000000000000010000001 // 468 microcode\microcode.us:168 width tmp_wr_en alu_op b_sel jump_type jump_target
0111101001100000001001000000000000000000000000000000000010000001 // 469 microcode\microcode.us:169 width tmp_wr_en alu_op b_sel jump_type jump_target
0111010100100000001001000000000000000000000000000000000010000001 // 46a microcode\microcode.us:170 width tmp_wr_en alu_op b_sel jump_type jump_target
0111000110000000000000000000000000000000100010000000110000000010 // 46b microcode\microcode.us:181 width ra_modrm_rm_reg rb_cl segment jump_type jump_target
0111001011100000000000000000000000000000100010000000110000000010 // 46c microcode\microcode.us:182 width ra_modrm_rm_reg rb_cl segment jump_type jump_target
0110101110000000000000000000000000000000100010000000110000000010 // 46d microcode\microcode.us:183 width ra_modrm_rm_reg rb_cl segment jump_type jump_target
0110110011100000000000000000000000000000100010000000110000000010 // 46e microcode\microcode.us:184 width ra_modrm_rm_reg rb_cl segment jump_type jump_target
0111100110000000000000000000000000000000100010000000110000000010 // 46f microcode\microcode.us:185 width ra_modrm_rm_reg rb_cl segment jump_type jump_target
0111101011100000000000000000000000000000100010000000110000000010 // 470 microcode\microcode.us:186 width ra_modrm_rm_reg rb_cl segment jump_type jump_target
0111100110000000000000000000000000000000100010000000110000000010 // 471 microcode\microcode.us:187 width ra_modrm_rm_reg rb_cl segment jump_type jump_target
0111010001000000000000000000000000000000100010000000110000000010 // 472 microcode\microcode.us:188 width ra_modrm_rm_reg rb_cl segment jump_type jump_target
1000000010100000000000000000000010000000100000000000110000000001 // 473 microcode\microcode.us:199 width ra_modrm_rm_reg segment jump_type jump_target
1000000010100000000000000000000010000000100000000000110000000001 // 474 microcode\microcode.us:200 width ra_modrm_rm_reg segment jump_type jump_target
0101110010100000000000000000000010000000100000000000110000000001 // 475 microcode\microcode.us:201 width ra_modrm_rm_reg segment jump_type jump_target
0101110001000000000000000000000010000000100000000000110000000001 // 476 microcode\microcode.us:202 width ra_modrm_rm_reg segment jump_type jump_target
0101100101100000000000000000000010000000100000000000110000000001 // 477 microcode\microcode.us:203 width ra_modrm_rm_reg segment jump_type jump_target
0101101010100000000000000000000010000000100000000000110000000001 // 478 microcode\microcode.us:204 width ra_modrm_rm_reg segment jump_type jump_target
0011011001000000000000000000000010000000100000000000110000000001 // 479 microcode\microcode.us:205 width ra_modrm_rm_reg segment jump_type jump_target
0011011111100000000000000000000010000000100000000000110000000001 // 47a microcode\microcode.us:206 width ra_modrm_rm_reg segment jump_type jump_target
1000000100000000000000000000000010000000100000000000110000000000 // 47b microcode\microcode.us:213 ra_modrm_rm_reg segment jump_type jump_target
1000000100000000000000000000000010000000100000000000110000000000 // 47c microcode\microcode.us:214 ra_modrm_rm_reg segment jump_type jump_target
0101110010100000000000000000000010000000100000000000110000000000 // 47d microcode\microcode.us:215 ra_modrm_rm_reg segment jump_type jump_target
0101110001000000000000000000000010000000100000000000110000000000 // 47e microcode\microcode.us:216 ra_modrm_rm_reg segment jump_type jump_target
0101101000000000000000000000000010000000100000000000110000000000 // 47f microcode\microcode.us:217 ra_modrm_rm_reg segment jump_type jump_target
0101101101000000000000000000000010000000100000000000110000000000 // 480 microcode\microcode.us:218 ra_modrm_rm_reg segment jump_type jump_target
0011011100100000000000000000000010000000100000000000110000000000 // 481 microcode\microcode.us:219 ra_modrm_rm_reg segment jump_type jump_target
0011100010000000000000000000000010000000100000000000110000000000 // 482 microcode\microcode.us:220 ra_modrm_rm_reg segment jump_type jump_target
0011111000000000000000000000000010000000100000000000110000000000 // 483 microcode\microcode.us:227 ra_modrm_rm_reg segment jump_type jump_target
0011111001100000000000000000000010000000100000000000110000000000 // 484 microcode\microcode.us:228 ra_modrm_rm_reg segment jump_type jump_target
0010111001000000000000000000000010000000100000000000110000000000 // 485 microcode\microcode.us:229 ra_modrm_rm_reg segment jump_type jump_target
0010111111100000000000000000000010000000000000000000011000000000 // 486 microcode\microcode.us:230 segment_force segment jump_type jump_target
0100101101100000000000000000000010000000100000000000110000000000 // 487 microcode\microcode.us:231 ra_modrm_rm_reg segment jump_type jump_target
0100101111000000000000000000000010000000100000000000110000000000 // 488 microcode\microcode.us:232 ra_modrm_rm_reg segment jump_type jump_target
0110010001100000000000000000000010000000010000000000110000000000 // 489 microcode\microcode.us:233 ra_sel segment jump_type jump_target
1000011101000000000000000000000000000000000000000000000000000000 // 48a microcode\microcode.us:234 jump_type jump_target
1001000110000000001001000001000000000000000000001100000000000000 // 48b microcode\microcode.us:241 b_sel alu_op immediate rd_sel_source rd_sel
1001000110100000001001000001000000000000000000011100000000000000 // 48c microcode\microcode.us:243 b_sel alu_op immediate rd_sel_source rd_sel
1001000111000000001001000001000000000000000000101100000000000000 // 48d microcode\microcode.us:245 b_sel alu_op immediate rd_sel_source rd_sel
1001000111100000001001000001000000000000000000111100000000000000 // 48e microcode\microcode.us:247 b_sel alu_op immediate rd_sel_source rd_sel
1001001000000000001001000001000000000000000001001100000000000000 // 48f microcode\microcode.us:249 b_sel alu_op immediate rd_sel_source rd_sel
1001001000100000001001000001000000000000000001011100000000000000 // 490 microcode\microcode.us:251 b_sel alu_op immediate rd_sel_source rd_sel
1001001001000000001001000001000000000000000001101100000000000000 // 491 microcode\microcode.us:253 b_sel alu_op immediate rd_sel_source rd_sel
1001001001100000001001000001000000000000000001111100000000000000 // 492 microcode\microcode.us:255 b_sel alu_op immediate rd_sel_source rd_sel
1001001010000000001001000001000000000000000000000000001100000000 // 493 microcode\microcode.us:257 b_sel alu_op immediate segment_force segment segment_wr_en
1001001010100000001001000111000000000000000000000000011100000000 // 494 microcode\microcode.us:259 b_sel alu_op immediate segment_force segment segment_wr_en
1001001011000000001001000001000000000000000000000000101100000000 // 495 microcode\microcode.us:261 b_sel alu_op immediate segment_force segment segment_wr_en
1001001011100000001001000001000000000000000000000000111100000000 // 496 microcode\microcode.us:263 b_sel alu_op immediate segment_force segment segment_wr_en
0010000000000000000000000000000000000001000000000000000000000000 // 497 microcode\microcode.us:265 next_instruction jump_type jump_target
1001001100100000000000000000000000000011000000000000110000000000 // 498 microcode\microcode.us:269 segment mem_write next_instruction
1001001101000000000000000000000000000011000000000000110000000010 // 499 microcode\microcode.us:272 segment mem_write width next_instruction
0010000001000000000000000000000000000000000000000000000010000000 // 49a microcode\debug.us:37 a_sel alu_op tmp_wr_en jump_type jump_target
0010000001000000001010000000000000000000000000000000000010000000 // 49b microcode\debug.us:40 b_sel alu_op tmp_wr_en jump_type jump_target
1001001110100000000000000000000000000100000000000000111000000001 // 49c microcode\debug.us:73 segment_force segment width mem_read
1001001111011000000000000000000000000000000000000000000010000000 // 49d microcode\debug.us:74 a_sel alu_op tmp_wr_en
0010000001010000010001000101000000110000000000000000000000000000 // 49e microcode\debug.us:75 a_sel b_sel immediate alu_op mar_wr_sel mar_write jump_type jump_target
1001010000000000000000000000000000000100000000000000111000000000 // 49f microcode\debug.us:83 segment_force segment mem_read
1001010000111000000000000000000000000000000000000000000010000000 // 4a0 microcode\debug.us:84 a_sel alu_op tmp_wr_en
0010000001010000010001000011000000110000000000000000000000000000 // 4a1 microcode\debug.us:85 a_sel b_sel immediate alu_op mar_wr_sel mar_write jump_type jump_target
1001010001100000000000000000000000000010000000000000111000000001 // 4a2 microcode\debug.us:93 segment_force segment width mem_write
0010000001010000010001000101000000110000000000000000000000000000 // 4a3 microcode\debug.us:94 a_sel b_sel immediate alu_op mar_wr_sel mar_write jump_type jump_target
1001010010100000000000000000000000000010000000000000111000000000 // 4a4 microcode\debug.us:102 segment_force segment mem_write
0010000001010000010001000011000000110000000000000000000000000000 // 4a5 microcode\debug.us:103 a_sel b_sel immediate alu_op mar_wr_sel mar_write jump_type jump_target
1001010011100000000000000000100000000100000000000000111000000001 // 4a6 microcode\debug.us:111 segment_force segment width mem_read io
0010000001011000000000000000000000000000000000000000000010000000 // 4a7 microcode\debug.us:112 a_sel alu_op tmp_wr_en jump_type jump_target
1001010100100000000000000000100000000100000000000000111000000000 // 4a8 microcode\debug.us:119 segment_force segment mem_read io
0010000001011000000000000000000000000000000000000000000010000000 // 4a9 microcode\debug.us:120 a_sel alu_op tmp_wr_en jump_type jump_target
0010000001000000000000000000100000000010000000000000111000000001 // 4aa microcode\debug.us:127 segment_force segment width mem_write io jump_type jump_target
0010000001000000000000000000100000000010000000000000111000000000 // 4ab microcode\debug.us:134 segment_force segment mem_write io jump_type jump_target
